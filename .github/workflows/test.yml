name: Tests and Coverage

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Run type checking
      run: yarn type-check
      
    - name: Run linting
      run: yarn lint
      continue-on-error: true
      
    - name: Run unit tests
      run: yarn test --run --reporter=verbose
      
    - name: Run tests with coverage (only on Node 20.x)
      if: matrix.node-version == '20.x'
      run: yarn test:coverage --reporter=verbose
      
    - name: Generate coverage summary
      if: matrix.node-version == '20.x'
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          echo "Coverage summary found"
        else
          echo "No coverage summary generated - creating mock summary"
          mkdir -p coverage
          echo '{"total":{"lines":{"pct":0},"functions":{"pct":0},"branches":{"pct":0},"statements":{"pct":0}}}' > coverage/coverage-summary.json
        fi
        
    - name: Upload coverage to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        fail_ci_if_error: false
        verbose: true
        
    - name: Coverage Summary to Job Summary
      if: matrix.node-version == '20.x'
      run: |
        echo "## 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
        if [ -f coverage/coverage-summary.json ]; then
          node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            console.log('| Metric | Coverage | Target | Status |');
            console.log('|--------|----------|--------|--------|');
            console.log('| Lines | ' + total.lines.pct + '% | 80% | ' + (total.lines.pct >= 80 ? '✅' : '❌') + ' |');
            console.log('| Functions | ' + total.functions.pct + '% | 90% | ' + (total.functions.pct >= 90 ? '✅' : '❌') + ' |');
            console.log('| Branches | ' + total.branches.pct + '% | 75% | ' + (total.branches.pct >= 75 ? '✅' : '❌') + ' |');
            console.log('| Statements | ' + total.statements.pct + '% | 80% | ' + (total.statements.pct >= 80 ? '✅' : '❌') + ' |');
            console.log('');
            console.log('**Note**: Coverage thresholds are aspirational. Current baseline: ~41% lines.');
          " >> $GITHUB_STEP_SUMMARY
        else
          echo "No coverage data available" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          test-results.xml
          coverage/
        retention-days: 7
        
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request' && matrix.node-version == '20.x'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (!fs.existsSync('coverage/coverage-summary.json')) {
            console.log('No coverage summary found');
            return;
          }
          
          const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
          const total = coverage.total;
          
          const coverageComment = `## 📊 Coverage Report
          
          | Metric | Coverage | Target | Status |
          |--------|----------|--------|--------|
          | Lines | ${total.lines.pct}% | 80% | ${total.lines.pct >= 80 ? '✅' : '❌'} |
          | Functions | ${total.functions.pct}% | 90% | ${total.functions.pct >= 90 ? '✅' : '❌'} |
          | Branches | ${total.branches.pct}% | 75% | ${total.branches.pct >= 75 ? '✅' : '❌'} |
          | Statements | ${total.statements.pct}% | 80% | ${total.statements.pct >= 80 ? '✅' : '❌'} |
          
          **Coverage Details:**
          - Lines: ${total.lines.covered}/${total.lines.total}
          - Functions: ${total.functions.covered}/${total.functions.total}  
          - Branches: ${total.branches.covered}/${total.branches.total}
          - Statements: ${total.statements.covered}/${total.statements.total}
          
          **Current Status**: Baseline coverage established (T015). Thresholds are aspirational targets.
          
          ${total.lines.pct >= 40 ? '✅ Coverage data looks good!' : '⚠️ Coverage data may be incomplete'}
          `;
          
          // Find existing coverage comment and update it
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.body.includes('📊 Coverage Report')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageComment
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageComment
            });
          }
          
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Build application
      run: yarn build
      
    - name: Check build artifacts
      run: |
        ls -la dist/
        echo "## 🏗️ Build Success" >> $GITHUB_STEP_SUMMARY
        echo "Application built successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build artifacts:**" >> $GITHUB_STEP_SUMMARY
        ls -la dist/ | head -10 >> $GITHUB_STEP_SUMMARY
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 7
