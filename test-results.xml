<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="526" failures="0" errors="0" time="32.9">
    <testsuite name="src/__tests__/pixiMocks.test.ts" timestamp="2025-07-21T00:00:46.915Z" hostname="XLW-CND1300JDV" tests="14" failures="0" errors="0" skipped="0" time="0.0550177">
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Constructors &gt; should create Container instances" time="0.0154975">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Constructors &gt; should create Sprite instances" time="0.0046286">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Constructors &gt; should create Graphics instances" time="0.0022412">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Constructors &gt; should create Application instances" time="0.0032801">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Functionality &gt; should handle Container child management" time="0.0033593">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Functionality &gt; should handle Graphics method chaining" time="0.0029597">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Functionality &gt; should handle Application initialization" time="0.0028331">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Functionality &gt; should handle Ticker functionality" time="0.0010019">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Assets and Texture Management &gt; should handle texture loading" time="0.0015676">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Assets and Texture Management &gt; should handle texture creation from sources" time="0.0015444">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Assets and Texture Management &gt; should handle spritesheet parsing" time="0.0022629">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Setup and Cleanup &gt; should clear mock history with setupPixiMocks" time="0.0020664">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Integration with Existing Code Patterns &gt; should work with pixiApp global pattern" time="0.0036775">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Integration with Existing Code Patterns &gt; should work with container hierarchy patterns" time="0.0023755">
        </testcase>
    </testsuite>
    <testsuite name="src/__tests__/pixiMocksIntegration.test.ts" timestamp="2025-07-21T00:00:46.938Z" hostname="XLW-CND1300JDV" tests="7" failures="0" errors="0" skipped="0" time="0.0373372">
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Application creation pattern" time="0.0184548">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Container hierarchy pattern" time="0.0039363">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Assets loading pattern" time="0.0025814">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Spritesheet pattern" time="0.0024548">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Sprite creation pattern" time="0.0019944">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Graphics drawing pattern" time="0.0026956">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Ticker pattern" time="0.0019838">
        </testcase>
    </testsuite>
    <testsuite name="src/__tests__/simple.test.ts" timestamp="2025-07-21T00:00:46.946Z" hostname="XLW-CND1300JDV" tests="1" failures="0" errors="0" skipped="0" time="0.0097272">
        <testcase classname="src/__tests__/simple.test.ts" name="Component Types &gt; should have all expected component types" time="0.0082327">
        </testcase>
    </testsuite>
    <testsuite name="src/__tests__/testUtils.test.ts" timestamp="2025-07-21T00:00:46.948Z" hostname="XLW-CND1300JDV" tests="14" failures="0" errors="0" skipped="0" time="0.0302488">
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Entity Factory Functions &gt; should create a test entity with no components" time="0.0037086">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Entity Factory Functions &gt; should create a test entity with provided components" time="0.0017668">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Entity Factory Functions &gt; should create test components of all types" time="0.0020033">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Entity Factory Functions &gt; should create entity with multiple components using factory" time="0.0011894">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Component Assertion Helpers &gt; should correctly assert entity has component" time="0.0024493">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Component Assertion Helpers &gt; should correctly assert entity does not have component" time="0.0013211">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Component Assertion Helpers &gt; should correctly assert component properties" time="0.0012285">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; System Testing Utilities &gt; should create test update args" time="0.0012752">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; System Testing Utilities &gt; should create mock game map" time="0.001468">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; System Testing Utilities &gt; should create mock game map with entities" time="0.00316">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Test Environment &gt; should create isolated test environment" time="0.001215">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Test Environment &gt; should manage entities in test environment" time="0.002447">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Advanced Utilities &gt; should create multiple test entities" time="0.0016755">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Advanced Utilities &gt; should find entities with specific components" time="0.0015599">
        </testcase>
    </testsuite>
    <testsuite name="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" timestamp="2025-07-21T00:00:46.956Z" hostname="XLW-CND1300JDV" tests="11" failures="0" errors="0" skipped="0" time="0.0536643">
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Instantiation and Basic Operation &gt; should instantiate all systems without errors" time="0.0051518">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Instantiation and Basic Operation &gt; should run all systems without throwing errors" time="0.0046002">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Instantiation and Basic Operation &gt; should handle systems with entities but no matching components" time="0.0039118">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Integration Verification &gt; should demonstrate systems can work with mocked dependencies" time="0.0033033">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Integration Verification &gt; should handle systems processing with component operations" time="0.003739">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Coordination and Coexistence &gt; should run multiple systems in sequence without interference" time="0.003176">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Coordination and Coexistence &gt; should handle rapid sequential system updates without state conflicts" time="0.01005">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Coordination and Coexistence &gt; should maintain system independence with different entity sets" time="0.0031962">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; Error Handling and Robustness &gt; should handle null or undefined entities gracefully" time="0.0034362">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; Error Handling and Robustness &gt; should handle component operation failures gracefully" time="0.0035925">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; Error Handling and Robustness &gt; should continue functioning after mock function failures" time="0.0020549">
        </testcase>
    </testsuite>
    <testsuite name="src/game/__tests__/gameplayScenarios-realJotai.test.ts" timestamp="2025-07-21T00:00:46.963Z" hostname="XLW-CND1300JDV" tests="1" failures="0" errors="0" skipped="0" time="0.0125241">
        <testcase classname="src/game/__tests__/gameplayScenarios-realJotai.test.ts" name="Core Gameplay Scenarios - Real Jotai Integration &gt; Complete Player Movement Workflow &gt; should handle complete movement workflow using real Jotai state: input → velocity → position" time="0.0103134">
        </testcase>
    </testsuite>
    <testsuite name="src/game/map/__tests__/MappingUtils.test.ts" timestamp="2025-07-21T00:00:46.967Z" hostname="XLW-CND1300JDV" tests="29" failures="0" errors="0" skipped="0" time="0.0677487">
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should convert grid position to screen coordinates using default tile size" time="0.0148873">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should convert grid position to screen coordinates using provided tile size" time="0.0068792">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle zero coordinates" time="0.0023006">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle negative coordinates" time="0.0025713">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle large coordinates" time="0.0018122">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle fractional coordinates by preserving them in calculation" time="0.0017379">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle zero tile size" time="0.0015396">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should convert grid position to screen coordinates tuple using default tile size" time="0.0054853">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should convert grid position using custom tile size and no gap" time="0.0016111">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should convert grid position using default tile size with gap" time="0.0019821">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should convert grid position using custom tile size and gap" time="0.0014876">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should handle zero coordinates" time="0.0011168">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should handle negative coordinates" time="0.0011641">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should handle zero gap" time="0.0015029">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should handle negative gap" time="0.0010622">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should convert screen position to grid coordinates using default tile size" time="0.001433">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should convert screen position to grid coordinates using provided tile size" time="0.0009395">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle zero coordinates" time="0.0007062">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle negative coordinates by flooring toward negative infinity" time="0.0006434">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle fractional coordinates by flooring" time="0.0009844">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle exact tile boundaries" time="0.0013338">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle large coordinates" time="0.0013138">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; bidirectional conversion consistency &gt; should maintain consistency between gridToScreen and screenToGrid for integer coordinates" time="0.0021193">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; bidirectional conversion consistency &gt; should maintain consistency for multiple coordinate pairs" time="0.001141">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; bidirectional conversion consistency &gt; should handle consistency with custom tile sizes" time="0.0005675">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; boundary conditions and edge cases &gt; should handle very small tile sizes" time="0.0004977">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; boundary conditions and edge cases &gt; should handle very large tile sizes" time="0.0004921">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; boundary conditions and edge cases &gt; should handle fractional tile sizes" time="0.0006458">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; boundary conditions and edge cases &gt; should handle when store.get returns undefined/null for tile size" time="0.0005156">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/CleanUpSystem.test.ts" timestamp="2025-07-21T00:00:46.996Z" hostname="XLW-CND1300JDV" tests="13" failures="0" errors="0" skipped="0" time="0.0516549">
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Entity Cleanup Operations &gt; should remove interacting components from entities" time="0.009832">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Entity Cleanup Operations &gt; should handle entities without interacting components" time="0.0032658">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Entity Cleanup Operations &gt; should handle mixed entities (some with, some without interacting)" time="0.0044974">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Entity Filtering &gt; should properly filter entities by interacting component" time="0.0027824">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Entity Filtering &gt; should handle entities with multiple components correctly" time="0.0031126">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Entity Filtering &gt; should process all interacting entities in a single update" time="0.0029024">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Edge Cases &gt; should handle empty entities array" time="0.0051068">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Edge Cases &gt; should handle null/undefined entities array" time="0.0025639">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Edge Cases &gt; should handle undefined entities array" time="0.0021218">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Edge Cases &gt; should handle entities with null/undefined components" time="0.0024411">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Component Cleanup Verification &gt; should ensure interacting components are actually removed" time="0.0021829">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Component Cleanup Verification &gt; should preserve other components while removing interacting" time="0.0018171">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Component Cleanup Verification &gt; should handle cleanup idempotently" time="0.0018533">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/KeyboardInputSystem.test.ts" timestamp="2025-07-21T00:00:47.002Z" hostname="XLW-CND1300JDV" tests="23" failures="0" errors="0" skipped="0" time="0.0736682">
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Key Event Processing &gt; should register keydown and keyup event listeners" time="0.0078514">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Key Event Processing &gt; should handle keydown events and mark as changed" time="0.0020669">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Key Event Processing &gt; should handle keyup events and update state" time="0.0020801">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Key Event Processing &gt; should only update when keys have changed" time="0.0015825">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should set upward velocity on ArrowUp key" time="0.0018191">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should set downward velocity on ArrowDown key" time="0.0016322">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should set leftward velocity on ArrowLeft key" time="0.0018921">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should set rightward velocity on ArrowRight key" time="0.0021994">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should handle diagonal movement with multiple keys" time="0.0026082">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should handle opposing keys correctly (last key wins)" time="0.0025776">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should reset velocity to zero when no movement keys are pressed" time="0.0023656">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should add InteractingComponent on E key press" time="0.0027302">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should add HandlingComponent on space key press" time="0.0020221">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should handle multiple interaction keys simultaneously" time="0.0037297">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should handle movement and interaction keys together" time="0.0019396">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should not add interaction components when keys are released" time="0.0015782">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should handle empty entities array" time="0.0033769">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should handle null/undefined map" time="0.0019105">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should require exactly one player entity" time="0.0028874">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should handle player entity without velocity component" time="0.0066557">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should handle unknown key presses gracefully" time="0.0026294">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should maintain key state correctly across multiple updates" time="0.0024913">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should properly reset hasChanged flag after processing" time="0.0018124">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/MovementSystem.test.ts" timestamp="2025-07-21T00:00:47.014Z" hostname="XLW-CND1300JDV" tests="17" failures="0" errors="0" skipped="0" time="0.0391177">
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; manual setComponent test for position" time="0.0059138">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should update entity position based on velocity" time="0.0029508">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should reset velocity to zero after processing" time="0.0018775">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should not move entity if velocity is zero" time="0.0011718">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should not move entity without position component" time="0.0020076">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should not move entity without velocity component" time="0.0014985">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should prevent movement to invalid map positions" time="0.0012704">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should allow movement through pickable entities" time="0.0015994">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should prevent movement when blocked by immovable entity" time="0.00112">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should push movable entities when possible" time="0.0016152">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should prevent pushing when movable entity cannot move" time="0.0014065">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle empty entities array" time="0.0010178">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle null/undefined entities" time="0.0010769">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle null/undefined map" time="0.0022768">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle multiple entities with complex interactions" time="0.0019676">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle diagonal movement correctly" time="0.0014103">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle negative velocity correctly" time="0.0019507">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/PickupSystem.test.ts" timestamp="2025-07-21T00:00:47.022Z" hostname="XLW-CND1300JDV" tests="18" failures="0" errors="0" skipped="0" time="0.0503087">
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Item Collection Mechanics &gt; should pick up item when player has handling component and no carried item" time="0.0059298">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Item Collection Mechanics &gt; should place item when player has carried item component" time="0.0040698">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Item Collection Mechanics &gt; should handle multiple items at same position and pick up first one" time="0.0026747">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Entity State Changes During Pickup Operations &gt; should properly transition item from map to inventory" time="0.0022859">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Entity State Changes During Pickup Operations &gt; should properly transition item from inventory to map" time="0.0032692">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Entity State Changes During Pickup Operations &gt; should always remove handling component after processing" time="0.0024386">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Inventory Management and Item Handling &gt; should maintain item entity reference in carried item component" time="0.0019617">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Inventory Management and Item Handling &gt; should handle inventory state transitions correctly" time="0.0021222">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Inventory Management and Item Handling &gt; should not affect other player components during item operations" time="0.0012268">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; System Entity Filtering &gt; should only process pickable entities" time="0.0011016">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; System Entity Filtering &gt; should filter entities by position correctly" time="0.0010235">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; System Entity Filtering &gt; should require both position and pickable components for pickup" time="0.0017763">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle missing player entity gracefully" time="0.0040319">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle player without position component" time="0.0015548">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle player without handling component" time="0.0014264">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle invalid carried item entity reference" time="0.0016933">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle empty entities array" time="0.001869">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle no items at player position" time="0.0016171">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/RenderSystem.test.ts" timestamp="2025-07-21T00:00:47.031Z" hostname="XLW-CND1300JDV" tests="6" failures="0" errors="0" skipped="0" time="0.0169951">
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; Rendering System with Mocked Pixi.js &gt; should be testable with mocked Pixi.js components" time="0.0094789">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; Rendering System with Mocked Pixi.js &gt; should work with mocked graphics objects" time="0.0011536">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; Rendering System with Mocked Pixi.js &gt; should handle entity lifecycle correctly with mocks" time="0.0012027">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; System Edge Cases &gt; should handle empty entity arrays" time="0.000959">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; System Edge Cases &gt; should manage container positioning" time="0.0007737">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; System Edge Cases &gt; should clean up removed entities" time="0.0006732">
        </testcase>
    </testsuite>
    <testsuite name="src/game/utils/__tests__/Atoms.test.ts" timestamp="2025-07-21T00:00:47.034Z" hostname="XLW-CND1300JDV" tests="37" failures="0" errors="0" skipped="0" time="0.0926429">
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; spritesheetsAtom and related functionality &gt; should initialize with empty spritesheet array" time="0.0155201">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; spritesheetsAtom and related functionality &gt; should add spritesheet using addSpritesheetAtom" time="0.0050551">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; spritesheetsAtom and related functionality &gt; should add multiple spritesheets maintaining order" time="0.0021007">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; spritesheetsAtom and related functionality &gt; should preserve existing spritesheets when adding new ones" time="0.0017606">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should return texture from spritesheet when found" time="0.002422">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should return null when texture not found" time="0.0018823">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should search through multiple spritesheets" time="0.0018176">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should return first matching texture if found in multiple spritesheets" time="0.0008755">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should return null when no spritesheets exist" time="0.0012991">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should initialize mapConfigAtom as undefined" time="0.0016448">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should update map config using updateMapConfigAtom" time="0.001574">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should handle partial updates to map config" time="0.0017104">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should overwrite existing properties in map config" time="0.0012588">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should handle update when mapConfigAtom is initially undefined" time="0.0014716">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should return tileSize from mapConfig when available" time="0.0013554">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should return 0 when mapConfig is undefined" time="0.0025157">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should return 0 when mapConfig exists but tileSize is undefined" time="0.0016833">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should return 0 when tileSize is null" time="0.0013547">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should handle various tileSize values correctly" time="0.0019657">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; entitiesAtom &gt; should initialize with empty entity array" time="0.0008203">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; entitiesAtom &gt; should store and retrieve entities" time="0.0009465">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; entitiesAtom &gt; should handle entity updates" time="0.0007475">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; systemsAtom &gt; should initialize with empty systems array" time="0.0009272">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; systemsAtom &gt; should store and retrieve systems" time="0.0013802">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapAtom &gt; should initialize with a new GameMap instance" time="0.0011164">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapAtom &gt; should allow setting a different GameMap instance" time="0.0016025">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should return undefined when no entities exist" time="0.0012663">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should return undefined when no player component exists" time="0.0034159">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should return player entity when player component exists" time="0.007808">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should return first player entity when multiple players exist" time="0.0017893">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should update when entities array changes" time="0.0014557">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; atom integration and state consistency &gt; should maintain independent state between different atoms" time="0.0039233">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; atom integration and state consistency &gt; should handle derived atom updates when base atoms change" time="0.0012884">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; atom integration and state consistency &gt; should handle playerAtom updates when entitiesAtom changes" time="0.0011504">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; error handling and edge cases &gt; should handle null/undefined values gracefully where supported" time="0.0021964">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; error handling and edge cases &gt; should handle empty arrays and objects" time="0.0011419">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; error handling and edge cases &gt; should handle malformed spritesheet objects" time="0.0011189">
        </testcase>
    </testsuite>
    <testsuite name="src/game/utils/__tests__/ecsUtils.test.ts" timestamp="2025-07-21T00:00:47.046Z" hostname="XLW-CND1300JDV" tests="6" failures="0" errors="0" skipped="0" time="0.0487477">
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; getEmptyPosition Integration &gt; should be available as an exported function" time="0.0391055">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should define proper Entity type structure" time="0.001418">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should support entity with components" time="0.0013556">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should support empty entity" time="0.0023042">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should support entity ID generation patterns" time="0.0011602">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should handle complex component combinations" time="0.0009793">
        </testcase>
    </testsuite>
    <testsuite name="src/game/utils/__tests__/EntityFactory.test.ts" timestamp="2025-07-21T00:00:47.050Z" hostname="XLW-CND1300JDV" tests="11" failures="0" errors="0" skipped="0" time="0.0201644">
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; Function Exports &gt; should export createEntityFromTemplate function" time="0.0033749">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; Function Exports &gt; should export createEntitiesFromTemplates function" time="0.0014562">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntityFromTemplate &gt; should create entity with generated ID" time="0.0019189">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntityFromTemplate &gt; should create entity with position component" time="0.0014315">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntityFromTemplate &gt; should create entity with player component" time="0.0010914">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntityFromTemplate &gt; should handle empty template" time="0.0013672">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntitiesFromTemplates &gt; should handle empty templates" time="0.0014099">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntitiesFromTemplates &gt; should create multiple entities from valid templates" time="0.0011827">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntitiesFromTemplates &gt; should maintain template independence" time="0.0012243">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; EntityTemplate Interface &gt; should support component template structure" time="0.0011243">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; EntityTemplate Interface &gt; should support template validation" time="0.0010504">
        </testcase>
    </testsuite>
    <testsuite name="src/game/utils/__tests__/EntityUtils.test.ts" timestamp="2025-07-21T00:00:47.055Z" hostname="XLW-CND1300JDV" tests="13" failures="0" errors="0" skipped="0" time="0.0310639">
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export addEntity function" time="0.0081952">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export addEntities function" time="0.0015939">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export removeEntity function" time="0.0015056">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export removeEntities function" time="0.0007302">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export getEntitiesWithComponents function" time="0.0012392">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export getEntity function" time="0.0012028">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntitiesWithComponents &gt; should filter entities by components" time="0.0033049">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntitiesWithComponents &gt; should handle multiple required components" time="0.0017021">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntitiesWithComponents &gt; should return empty array when no entities match" time="0.0018402">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntity &gt; should find entity by ID from store" time="0.0011433">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntity &gt; should return undefined for non-existent ID" time="0.0013686">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntity &gt; should handle empty entities array" time="0.0015244">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Entity Store Integration &gt; should interact with store for entity operations" time="0.002728">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" timestamp="2025-07-21T00:00:47.060Z" hostname="XLW-CND1300JDV" tests="28" failures="0" errors="0" skipped="0" time="0.0928418">
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Creation &gt; should create a carried item component with valid item name" time="0.0214899">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Creation &gt; should create component with different item types" time="0.003352">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Creation &gt; should create component with empty string item" time="0.003797">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Creation &gt; should create component with whitespace item name" time="0.0033624">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Validation &gt; should handle special characters in item names" time="0.0035505">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Validation &gt; should handle unicode characters in item names" time="0.0016025">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Validation &gt; should handle very long item names" time="0.001047">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Validation &gt; should handle numeric strings as item names" time="0.0035283">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Type &gt; should always have the correct component type" time="0.0022374">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Type &gt; should maintain type consistency across instances" time="0.0018795">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Modification &gt; should allow direct item property modification" time="0.0013996">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Modification &gt; should handle item swapping scenarios" time="0.0016525">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Modification &gt; should handle item clearing" time="0.001207">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Inventory Management &gt; should support item identification" time="0.0015805">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Inventory Management &gt; should support item categorization" time="0.0022239">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Inventory Management &gt; should support item stack simulation" time="0.0020579">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Game Logic Integration &gt; should work with item usage systems" time="0.001266">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Game Logic Integration &gt; should support item dropping mechanics" time="0.0007981">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Game Logic Integration &gt; should work with quest item tracking" time="0.0010306">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0018637">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Serialization Compatibility &gt; should handle special characters in serialization" time="0.0010155">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Serialization Compatibility &gt; should serialize empty items correctly" time="0.0016925">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Serialization Compatibility &gt; should handle array serialization of inventory" time="0.0053434">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Equality and Comparison &gt; should create distinct instances with different items" time="0.0025962">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Equality and Comparison &gt; should support item-based comparison" time="0.0010433">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Equality and Comparison &gt; should support case-sensitive item comparison" time="0.0007137">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Edge Cases &gt; should handle null-like strings" time="0.0044557">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Edge Cases &gt; should preserve string formatting" time="0.001981">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" timestamp="2025-07-21T00:00:47.070Z" hostname="XLW-CND1300JDV" tests="32" failures="0" errors="0" skipped="0" time="0.0686911">
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Creation &gt; should create a handling component" time="0.0126326">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0017374">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Type &gt; should always have the correct component type" time="0.0015908">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0013123">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0021249">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0014402">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0012965">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; ECS Integration &gt; should be usable as a filter component for handling systems" time="0.0012501">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0029597">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0014987">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; ECS Integration &gt; should integrate with handling game mechanics" time="0.0011308">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Interaction Handling Logic &gt; should indicate active interaction handling state" time="0.0011172">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Interaction Handling Logic &gt; should work with interaction processing systems" time="0.0014116">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Interaction Handling Logic &gt; should support interaction queue management" time="0.0012793">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Game System Integration &gt; should work with input handling systems" time="0.0009108">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Game System Integration &gt; should support event handling mechanics" time="0.0010889">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Game System Integration &gt; should work with command processing systems" time="0.001026">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Game System Integration &gt; should integrate with state machine transitions" time="0.0021296">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Concurrency and Processing &gt; should support concurrent handling operations" time="0.0013479">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Concurrency and Processing &gt; should work with handling priority systems" time="0.0011623">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Concurrency and Processing &gt; should support handling delegation patterns" time="0.0008526">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0007255">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0007867">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple handlers" time="0.0011581">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Serialization Compatibility &gt; should preserve handling state in save files" time="0.0011599">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Lifecycle &gt; should represent active handling state" time="0.0006942">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Lifecycle &gt; should support handling state transitions" time="0.0006978">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Equality &gt; should create distinct instances" time="0.0012824">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.0005855">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Performance Characteristics &gt; should create components efficiently for frequent handling operations" time="0.0018827">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Error Handling and Edge Cases &gt; should maintain consistency under rapid creation/destruction" time="0.0107037">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Error Handling and Edge Cases &gt; should work with complex handling scenarios" time="0.0009592">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" timestamp="2025-07-21T00:00:47.082Z" hostname="XLW-CND1300JDV" tests="29" failures="0" errors="0" skipped="0" time="0.0667322">
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Creation &gt; should create an interacting component" time="0.0157276">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0037641">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Type &gt; should always have the correct component type" time="0.0015319">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0012654">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0024422">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0016657">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0013567">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; ECS Integration &gt; should be usable as a filter component for interaction systems" time="0.0014788">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0074069">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0017444">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; ECS Integration &gt; should integrate with interaction game mechanics" time="0.0018169">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Game State Management &gt; should indicate active interaction state" time="0.0010629">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Game State Management &gt; should work with interaction state tracking" time="0.0014319">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Game State Management &gt; should support interaction session management" time="0.0010649">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Interaction System Integration &gt; should work with player-NPC interaction systems" time="0.0010087">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Interaction System Integration &gt; should support object interaction mechanics" time="0.0012462">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Interaction System Integration &gt; should work with interaction cooldown systems" time="0.0010566">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Interaction System Integration &gt; should integrate with interaction range detection" time="0.0007171">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0009718">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0009219">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple interactions" time="0.0015046">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Serialization Compatibility &gt; should preserve interaction state in save files" time="0.00084">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Lifecycle &gt; should represent temporary interaction state" time="0.0007549">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Lifecycle &gt; should support interaction state transitions" time="0.0006294">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Equality &gt; should create distinct instances" time="0.0011214">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.0007156">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Performance Characteristics &gt; should create components efficiently for frequent interaction state changes" time="0.0016785">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Multi-Entity Interaction Scenarios &gt; should support multiple simultaneous interactions" time="0.0011741">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Multi-Entity Interaction Scenarios &gt; should work with interaction exclusivity checks" time="0.0010207">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" timestamp="2025-07-21T00:00:47.093Z" hostname="XLW-CND1300JDV" tests="17" failures="0" errors="0" skipped="0" time="0.0374979">
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Creation &gt; should create a movable component" time="0.0108744">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.001628">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Type &gt; should always have the correct component type" time="0.0015843">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.002449">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0025466">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0015912">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0013483">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; ECS Integration &gt; should be usable as a filter component in ECS systems" time="0.000859">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.002489">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0009855">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0009768">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0008769">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple components" time="0.001457">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Equality &gt; should create distinct instances" time="0.0012779">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Equality &gt; should support type-based comparison" time="0.0006179">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Immutability &gt; should have stable type after creation" time="0.0006856">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Performance Characteristics &gt; should create components efficiently" time="0.0009798">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" timestamp="2025-07-21T00:00:47.100Z" hostname="XLW-CND1300JDV" tests="19" failures="0" errors="0" skipped="0" time="0.040985">
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Creation &gt; should create a pickable component" time="0.0111418">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0020503">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Type &gt; should always have the correct component type" time="0.0012966">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0012312">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0021454">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0013847">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0010866">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; ECS Integration &gt; should be usable as a filter component for pickup systems" time="0.0008717">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0025618">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0010332">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; ECS Integration &gt; should integrate with pickup game mechanics" time="0.0011114">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0010816">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0014927">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple components" time="0.0014209">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Equality &gt; should create distinct instances" time="0.0013993">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.001021">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Game Logic Integration &gt; should support item identification for pickup systems" time="0.0007645">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Game Logic Integration &gt; should work with inventory management systems" time="0.0012196">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Performance Characteristics &gt; should create components efficiently" time="0.0018113">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" timestamp="2025-07-21T00:00:47.106Z" hostname="XLW-CND1300JDV" tests="34" failures="0" errors="0" skipped="0" time="0.0736266">
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Creation &gt; should create a player component" time="0.0125205">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0020787">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Type &gt; should always have the correct component type" time="0.0014196">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.001177">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.002486">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0015234">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0014291">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; ECS Integration &gt; should be usable as a filter component for player systems" time="0.0010575">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0032118">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0016101">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; ECS Integration &gt; should integrate with player-specific systems" time="0.0041366">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Player State Management &gt; should indicate player entity status" time="0.0016075">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Player State Management &gt; should work with player identification systems" time="0.0040838">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Player State Management &gt; should support player-specific game logic" time="0.0013756">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Game State Integration &gt; should work with save/load systems" time="0.0009922">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Game State Integration &gt; should support player state persistence" time="0.0015896">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Game State Integration &gt; should integrate with player progression systems" time="0.0017795">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0020969">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0007295">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple player components" time="0.0012893">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Serialization Compatibility &gt; should preserve player state in save files" time="0.001116">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Equality &gt; should create distinct instances" time="0.0019988">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.000949">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Performance Characteristics &gt; should create components efficiently for large player counts" time="0.0019668">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Edge Cases and Invalid States &gt; should handle multiple player components on same entity" time="0.0010679">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Edge Cases and Invalid States &gt; should work with empty component arrays" time="0.001075">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Edge Cases and Invalid States &gt; should handle null/undefined component checks gracefully" time="0.0018569">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; State Transition Testing &gt; should maintain consistent state during component lifecycle" time="0.0012048">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; State Transition Testing &gt; should support valid state transitions in game systems" time="0.0013144">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; State Transition Testing &gt; should prevent invalid state transitions" time="0.002538">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Advanced Game Mechanics &gt; should support single-player game mechanics" time="0.0010918">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Advanced Game Mechanics &gt; should work with multiplayer identification systems" time="0.0008701">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Advanced Game Mechanics &gt; should support player-specific input handling" time="0.0009006">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Advanced Game Mechanics &gt; should integrate with player-specific camera systems" time="0.0009544">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" timestamp="2025-07-21T00:00:47.117Z" hostname="XLW-CND1300JDV" tests="15" failures="0" errors="0" skipped="0" time="0.0306921">
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Creation &gt; should create a position component with valid coordinates" time="0.0118307">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Creation &gt; should create component with zero coordinates" time="0.00114">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Creation &gt; should create component with negative coordinates" time="0.0011775">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Creation &gt; should create component with fractional coordinates" time="0.0010046">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Validation &gt; should handle very large coordinate values" time="0.0009938">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Validation &gt; should handle very small coordinate values" time="0.0012179">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Validation &gt; should handle Infinity values" time="0.0009336">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Edge Cases &gt; should handle NaN coordinates" time="0.0007238">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Edge Cases &gt; should handle mixed valid and invalid coordinates" time="0.0010105">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Type &gt; should always have the correct component type" time="0.0008647">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Type &gt; should maintain type consistency across instances" time="0.0007869">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Modification &gt; should allow direct property modification" time="0.0009401">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Modification &gt; should handle property modification with edge values" time="0.0012226">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0015595">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Serialization Compatibility &gt; should handle serialization with special values" time="0.0010631">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" timestamp="2025-07-21T00:00:47.123Z" hostname="XLW-CND1300JDV" tests="29" failures="0" errors="0" skipped="0" time="0.0316598">
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Creation &gt; should create a render in sidebar component" time="0.0076623">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0012588">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Type &gt; should always have the correct component type" time="0.0007505">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.000684">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0012559">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0007797">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0007381">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; ECS Integration &gt; should be usable as a filter component for sidebar rendering systems" time="0.0005238">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.001699">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0006485">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; ECS Integration &gt; should integrate with UI rendering systems" time="0.0005759">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; UI System Integration &gt; should indicate sidebar rendering requirement" time="0.0004663">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; UI System Integration &gt; should work with sidebar layout systems" time="0.0007486">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; UI System Integration &gt; should support UI element categorization" time="0.0009851">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Rendering System Integration &gt; should work with dual-pane rendering systems" time="0.0009413">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Rendering System Integration &gt; should support conditional rendering logic" time="0.0009687">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Rendering System Integration &gt; should integrate with layout management" time="0.000647">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Rendering System Integration &gt; should work with responsive UI systems" time="0.0007405">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.000437">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0003529">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple sidebar components" time="0.0008088">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Serialization Compatibility &gt; should preserve UI state in save files" time="0.00059">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Equality &gt; should create distinct instances" time="0.0007454">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.0003338">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Performance Characteristics &gt; should create components efficiently for UI operations" time="0.0008325">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Game UI Integration &gt; should support inventory sidebar rendering" time="0.0003602">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Game UI Integration &gt; should work with minimap sidebar rendering" time="0.000315">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Game UI Integration &gt; should support status display in sidebar" time="0.0005055">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Game UI Integration &gt; should handle dynamic sidebar content" time="0.0003505">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" timestamp="2025-07-21T00:00:47.132Z" hostname="XLW-CND1300JDV" tests="31" failures="0" errors="0" skipped="0" time="0.0817545">
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Creation &gt; should create a sprite component with valid sprite name" time="0.0153607">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Creation &gt; should create component with different sprite types" time="0.0066456">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Creation &gt; should set sprite size from tile size atom" time="0.002453">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Error Handling &gt; should throw error when texture is not found" time="0.0029582">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Error Handling &gt; should handle different invalid sprite names" time="0.0016268">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Error Handling &gt; should provide meaningful error messages" time="0.0013407">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Type &gt; should always have the correct component type" time="0.0015082">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Type &gt; should maintain type consistency across instances" time="0.0011504">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Pixi.js Integration &gt; should create Pixi.js Sprite instance" time="0.002207">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Pixi.js Integration &gt; should pass texture to Pixi.js Sprite constructor" time="0.0020948">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Pixi.js Integration &gt; should handle different texture sizes" time="0.0018688">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Sprite Properties &gt; should have access to sprite properties" time="0.0011006">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Sprite Properties &gt; should allow sprite property modification" time="0.0014395">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Sprite Properties &gt; should support sprite visibility toggle" time="0.0013332">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Tile Size Integration &gt; should use different tile sizes" time="0.0022242">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Tile Size Integration &gt; should handle non-square tile sizes" time="0.001834">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Tile Size Integration &gt; should call setSize on sprite creation" time="0.0019957">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Rendering System Integration &gt; should be compatible with rendering systems" time="0.0012556">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Rendering System Integration &gt; should support sprite positioning" time="0.0008472">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Rendering System Integration &gt; should work with sprite transformation" time="0.0010282">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Resource Management &gt; should handle sprite cleanup" time="0.0009313">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Resource Management &gt; should support sprite destruction" time="0.0011066">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Different Sprite Types &gt; should handle player sprites" time="0.0011457">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Different Sprite Types &gt; should handle environment sprites" time="0.0022602">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Different Sprite Types &gt; should handle item sprites" time="0.0020717">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Edge Cases &gt; should handle empty sprite names" time="0.0011108">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Edge Cases &gt; should handle special character sprite names" time="0.0025286">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Edge Cases &gt; should handle very long sprite names" time="0.0022292">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Serialization Considerations &gt; should have serializable component type" time="0.0019479">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Serialization Considerations &gt; should handle component identification" time="0.0025106">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Serialization Considerations &gt; should preserve sprite reference for ECS operations" time="0.0012197">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" timestamp="2025-07-21T00:00:47.140Z" hostname="XLW-CND1300JDV" tests="22" failures="0" errors="0" skipped="0" time="0.053459">
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create a velocity component with valid velocity values" time="0.0123918">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create component with zero velocity" time="0.0023738">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create component with positive velocities" time="0.0013532">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create component with negative velocities" time="0.0011474">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create component with fractional velocities" time="0.0015801">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Validation &gt; should handle very large velocity values" time="0.0019904">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Validation &gt; should handle very small velocity values" time="0.0014538">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Validation &gt; should handle very small positive values" time="0.000981">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Validation &gt; should handle Infinity values" time="0.0013335">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Edge Cases &gt; should handle NaN velocities" time="0.0012489">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Edge Cases &gt; should handle mixed valid and invalid velocities" time="0.0008834">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Edge Cases &gt; should handle negative zero values" time="0.0007635">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Type &gt; should always have the correct component type" time="0.0008453">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Type &gt; should maintain type consistency across instances" time="0.0010835">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Modification &gt; should allow direct property modification" time="0.0014961">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Modification &gt; should handle velocity direction changes" time="0.0028153">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Modification &gt; should handle velocity magnitude changes" time="0.0010523">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Physics Calculations Compatibility &gt; should support velocity magnitude calculation" time="0.0017719">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Physics Calculations Compatibility &gt; should support velocity normalization" time="0.0046201">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Physics Calculations Compatibility &gt; should handle zero velocity normalization gracefully" time="0.0016035">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0032274">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Serialization Compatibility &gt; should handle serialization with zero values" time="0.0023233">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" timestamp="2025-07-21T00:00:47.145Z" hostname="XLW-CND1300JDV" tests="32" failures="0" errors="0" skipped="0" time="0.0613813">
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Creation &gt; should create a walkable component" time="0.0126944">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0020735">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Type &gt; should always have the correct component type" time="0.0037704">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0020324">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0024452">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.001703">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0017292">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; ECS Integration &gt; should be usable as a filter component for collision systems" time="0.0012104">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0040134">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0017899">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; ECS Integration &gt; should integrate with movement systems" time="0.0015737">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Collision Detection Integration &gt; should indicate walkable terrain" time="0.0011817">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Collision Detection Integration &gt; should work with pathfinding systems" time="0.0012705">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Collision Detection Integration &gt; should support collision boundary detection" time="0.0006963">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Movement System Integration &gt; should work with player movement validation" time="0.0010524">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Movement System Integration &gt; should support NPC movement systems" time="0.0014137">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Movement System Integration &gt; should integrate with movement speed calculations" time="0.0008953">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Movement System Integration &gt; should work with dynamic terrain changes" time="0.000849">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Game Map Integration &gt; should support tile-based collision detection" time="0.001092">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Game Map Integration &gt; should work with procedural map generation" time="0.0007234">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Game Map Integration &gt; should support multi-layer map systems" time="0.0006207">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0004017">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0005054">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Serialization Compatibility &gt; should handle map serialization with walkable components" time="0.0009187">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Serialization Compatibility &gt; should preserve terrain state in save files" time="0.0008779">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Equality &gt; should create distinct instances" time="0.0011246">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Equality &gt; should support type-based comparison for collision systems" time="0.0005193">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Performance Characteristics &gt; should create components efficiently for large maps" time="0.0024588">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Advanced Game Mechanics &gt; should support conditional walkability" time="0.0004665">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Advanced Game Mechanics &gt; should work with teleportation systems" time="0.0004863">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Advanced Game Mechanics &gt; should support area-of-effect movement restrictions" time="0.0005688">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Advanced Game Mechanics &gt; should integrate with physics-based movement" time="0.000686">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" timestamp="2025-07-21T00:00:47.152Z" hostname="XLW-CND1300JDV" tests="11" failures="0" errors="0" skipped="0" time="0.0283319">
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; System Initialization &gt; should verify system interface compatibility" time="0.0108559">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; System Initialization &gt; should handle placement operations through mocked dependencies" time="0.0020877">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Bresenham Line Algorithm &gt; should calculate points between two positions" time="0.0017734">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Bresenham Line Algorithm &gt; should handle horizontal line drawing" time="0.0015289">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Bresenham Line Algorithm &gt; should handle vertical line drawing" time="0.0012404">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Placement Logic &gt; should use screen to grid coordinate conversion" time="0.0023155">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Placement Logic &gt; should create entities from templates" time="0.0020276">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Placement Logic &gt; should handle component checking for existing entities" time="0.0005645">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Management Integration &gt; should add new entities through EntityUtils" time="0.0009321">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Management Integration &gt; should remove entities through EntityUtils" time="0.0007657">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Management Integration &gt; should handle empty entity operations" time="0.000729">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" timestamp="2025-07-21T00:00:47.155Z" hostname="XLW-CND1300JDV" tests="6" failures="0" errors="0" skipped="0" time="0.0131213">
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Sidebar UI Rendering &gt; should handle sidebar rendering with mocked Pixi.js components" time="0.0070097">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Sidebar UI Rendering &gt; should render entities with RenderInSidebar component" time="0.001339">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Sidebar UI Rendering &gt; should manage sidebar container positioning" time="0.0009746">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Entity Filtering and Management &gt; should filter entities by required components" time="0.0007099">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Entity Filtering and Management &gt; should handle entity lifecycle in sidebar" time="0.0006219">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Entity Filtering and Management &gt; should integrate with component system" time="0.0005781">
        </testcase>
    </testsuite>
</testsuites>
