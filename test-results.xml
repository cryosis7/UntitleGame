<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="514" failures="0" errors="0" time="22.518">
    <testsuite name="src/__tests__/pixiMocks.test.ts" timestamp="2025-07-20T20:50:17.978Z" hostname="XLW-CND1300JDV" tests="14" failures="0" errors="0" skipped="0" time="0.0313507">
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Constructors &gt; should create Container instances" time="0.0089454">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Constructors &gt; should create Sprite instances" time="0.0020093">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Constructors &gt; should create Graphics instances" time="0.0013342">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Constructors &gt; should create Application instances" time="0.0023792">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Functionality &gt; should handle Container child management" time="0.0019009">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Functionality &gt; should handle Graphics method chaining" time="0.0017984">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Functionality &gt; should handle Application initialization" time="0.0019559">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Functionality &gt; should handle Ticker functionality" time="0.0009863">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Assets and Texture Management &gt; should handle texture loading" time="0.0009843">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Assets and Texture Management &gt; should handle texture creation from sources" time="0.0008764">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Assets and Texture Management &gt; should handle spritesheet parsing" time="0.0009462">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Setup and Cleanup &gt; should clear mock history with setupPixiMocks" time="0.0010518">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Integration with Existing Code Patterns &gt; should work with pixiApp global pattern" time="0.001435">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Integration with Existing Code Patterns &gt; should work with container hierarchy patterns" time="0.0014324">
        </testcase>
    </testsuite>
    <testsuite name="src/__tests__/pixiMocksIntegration.test.ts" timestamp="2025-07-20T20:50:17.994Z" hostname="XLW-CND1300JDV" tests="7" failures="0" errors="0" skipped="0" time="0.0260876">
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Application creation pattern" time="0.0119885">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Container hierarchy pattern" time="0.0032757">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Assets loading pattern" time="0.0016942">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Spritesheet pattern" time="0.0016513">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Sprite creation pattern" time="0.0016773">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Graphics drawing pattern" time="0.002064">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Ticker pattern" time="0.0016995">
        </testcase>
    </testsuite>
    <testsuite name="src/__tests__/simple.test.ts" timestamp="2025-07-20T20:50:17.999Z" hostname="XLW-CND1300JDV" tests="1" failures="0" errors="0" skipped="0" time="0.0077893">
        <testcase classname="src/__tests__/simple.test.ts" name="Component Types &gt; should have all expected component types" time="0.0064859">
        </testcase>
    </testsuite>
    <testsuite name="src/__tests__/testUtils.test.ts" timestamp="2025-07-20T20:50:18.000Z" hostname="XLW-CND1300JDV" tests="14" failures="0" errors="0" skipped="0" time="0.0259298">
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Entity Factory Functions &gt; should create a test entity with no components" time="0.0029142">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Entity Factory Functions &gt; should create a test entity with provided components" time="0.0011018">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Entity Factory Functions &gt; should create test components of all types" time="0.0017614">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Entity Factory Functions &gt; should create entity with multiple components using factory" time="0.000964">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Component Assertion Helpers &gt; should correctly assert entity has component" time="0.0022735">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Component Assertion Helpers &gt; should correctly assert entity does not have component" time="0.0014589">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Component Assertion Helpers &gt; should correctly assert component properties" time="0.0014664">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; System Testing Utilities &gt; should create test update args" time="0.001719">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; System Testing Utilities &gt; should create mock game map" time="0.0011281">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; System Testing Utilities &gt; should create mock game map with entities" time="0.0025907">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Test Environment &gt; should create isolated test environment" time="0.000963">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Test Environment &gt; should manage entities in test environment" time="0.0018739">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Advanced Utilities &gt; should create multiple test entities" time="0.0013774">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Advanced Utilities &gt; should find entities with specific components" time="0.0012177">
        </testcase>
    </testsuite>
    <testsuite name="src/game/map/__tests__/MappingUtils.test.ts" timestamp="2025-07-20T20:50:18.006Z" hostname="XLW-CND1300JDV" tests="29" failures="0" errors="0" skipped="0" time="0.0320615">
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should convert grid position to screen coordinates using default tile size" time="0.0121091">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should convert grid position to screen coordinates using provided tile size" time="0.0012405">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle zero coordinates" time="0.0008018">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle negative coordinates" time="0.0006549">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle large coordinates" time="0.0006557">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle fractional coordinates by preserving them in calculation" time="0.0006874">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle zero tile size" time="0.0006659">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should convert grid position to screen coordinates tuple using default tile size" time="0.0007388">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should convert grid position using custom tile size and no gap" time="0.000786">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should convert grid position using default tile size with gap" time="0.000785">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should convert grid position using custom tile size and gap" time="0.0006137">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should handle zero coordinates" time="0.0004987">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should handle negative coordinates" time="0.0005666">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should handle zero gap" time="0.0004988">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should handle negative gap" time="0.0004742">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should convert screen position to grid coordinates using default tile size" time="0.0007551">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should convert screen position to grid coordinates using provided tile size" time="0.0004555">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle zero coordinates" time="0.000375">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle negative coordinates by flooring toward negative infinity" time="0.0003609">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle fractional coordinates by flooring" time="0.0006441">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle exact tile boundaries" time="0.0005145">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle large coordinates" time="0.000406">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; bidirectional conversion consistency &gt; should maintain consistency between gridToScreen and screenToGrid for integer coordinates" time="0.0006035">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; bidirectional conversion consistency &gt; should maintain consistency for multiple coordinate pairs" time="0.0007286">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; bidirectional conversion consistency &gt; should handle consistency with custom tile sizes" time="0.0003696">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; boundary conditions and edge cases &gt; should handle very small tile sizes" time="0.0005065">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; boundary conditions and edge cases &gt; should handle very large tile sizes" time="0.0005035">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; boundary conditions and edge cases &gt; should handle fractional tile sizes" time="0.0006402">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; boundary conditions and edge cases &gt; should handle when store.get returns undefined/null for tile size" time="0.0004576">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/CleanUpSystem.test.ts" timestamp="2025-07-20T20:50:18.014Z" hostname="XLW-CND1300JDV" tests="13" failures="0" errors="0" skipped="0" time="0.0351221">
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Entity Cleanup Operations &gt; should remove interacting components from entities" time="0.0091702">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Entity Cleanup Operations &gt; should handle entities without interacting components" time="0.0020477">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Entity Cleanup Operations &gt; should handle mixed entities (some with, some without interacting)" time="0.0017175">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Entity Filtering &gt; should properly filter entities by interacting component" time="0.0021673">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Entity Filtering &gt; should handle entities with multiple components correctly" time="0.0020633">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Entity Filtering &gt; should process all interacting entities in a single update" time="0.0026226">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Edge Cases &gt; should handle empty entities array" time="0.002668">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Edge Cases &gt; should handle null/undefined entities array" time="0.0012118">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Edge Cases &gt; should handle undefined entities array" time="0.0012349">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Edge Cases &gt; should handle entities with null/undefined components" time="0.0010435">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Component Cleanup Verification &gt; should ensure interacting components are actually removed" time="0.0015459">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Component Cleanup Verification &gt; should preserve other components while removing interacting" time="0.0011515">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Component Cleanup Verification &gt; should handle cleanup idempotently" time="0.0011412">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/KeyboardInputSystem.test.ts" timestamp="2025-07-20T20:50:18.018Z" hostname="XLW-CND1300JDV" tests="23" failures="0" errors="0" skipped="0" time="0.0899429">
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Key Event Processing &gt; should register keydown and keyup event listeners" time="0.0146572">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Key Event Processing &gt; should handle keydown events and mark as changed" time="0.0052933">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Key Event Processing &gt; should handle keyup events and update state" time="0.0033269">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Key Event Processing &gt; should only update when keys have changed" time="0.0031093">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should set upward velocity on ArrowUp key" time="0.0023173">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should set downward velocity on ArrowDown key" time="0.0020854">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should set leftward velocity on ArrowLeft key" time="0.0033111">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should set rightward velocity on ArrowRight key" time="0.0022214">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should handle diagonal movement with multiple keys" time="0.0030783">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should handle opposing keys correctly (last key wins)" time="0.0034613">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should reset velocity to zero when no movement keys are pressed" time="0.0024563">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should add InteractingComponent on E key press" time="0.0031648">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should add HandlingComponent on space key press" time="0.0020564">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should handle multiple interaction keys simultaneously" time="0.0024483">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should handle movement and interaction keys together" time="0.0022623">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should not add interaction components when keys are released" time="0.0021703">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should handle empty entities array" time="0.0037346">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should handle null/undefined map" time="0.0024208">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should require exactly one player entity" time="0.0027655">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should handle player entity without velocity component" time="0.0024805">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should handle unknown key presses gracefully" time="0.0023104">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should maintain key state correctly across multiple updates" time="0.0022649">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should properly reset hasChanged flag after processing" time="0.0024407">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/MovementSystem.test.ts" timestamp="2025-07-20T20:50:18.025Z" hostname="XLW-CND1300JDV" tests="17" failures="0" errors="0" skipped="0" time="0.0628748">
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; manual setComponent test for position" time="0.0070752">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should update entity position based on velocity" time="0.0055288">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should reset velocity to zero after processing" time="0.0030317">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should not move entity if velocity is zero" time="0.0032228">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should not move entity without position component" time="0.0040154">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should not move entity without velocity component" time="0.003195">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should prevent movement to invalid map positions" time="0.0027063">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should allow movement through pickable entities" time="0.0027763">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should prevent movement when blocked by immovable entity" time="0.0023617">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should push movable entities when possible" time="0.002577">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should prevent pushing when movable entity cannot move" time="0.0030436">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle empty entities array" time="0.0020359">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle null/undefined entities" time="0.0021747">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle null/undefined map" time="0.002537">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle multiple entities with complex interactions" time="0.0020283">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle diagonal movement correctly" time="0.0013555">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle negative velocity correctly" time="0.001878">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/PickupSystem.test.ts" timestamp="2025-07-20T20:50:18.031Z" hostname="XLW-CND1300JDV" tests="18" failures="0" errors="0" skipped="0" time="0.0426727">
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Item Collection Mechanics &gt; should pick up item when player has handling component and no carried item" time="0.0053086">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Item Collection Mechanics &gt; should place item when player has carried item component" time="0.0038684">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Item Collection Mechanics &gt; should handle multiple items at same position and pick up first one" time="0.0023945">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Entity State Changes During Pickup Operations &gt; should properly transition item from map to inventory" time="0.0017292">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Entity State Changes During Pickup Operations &gt; should properly transition item from inventory to map" time="0.0029628">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Entity State Changes During Pickup Operations &gt; should always remove handling component after processing" time="0.0020425">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Inventory Management and Item Handling &gt; should maintain item entity reference in carried item component" time="0.0013239">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Inventory Management and Item Handling &gt; should handle inventory state transitions correctly" time="0.0015857">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Inventory Management and Item Handling &gt; should not affect other player components during item operations" time="0.0012712">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; System Entity Filtering &gt; should only process pickable entities" time="0.0011658">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; System Entity Filtering &gt; should filter entities by position correctly" time="0.0010503">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; System Entity Filtering &gt; should require both position and pickable components for pickup" time="0.001134">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle missing player entity gracefully" time="0.002301">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle player without position component" time="0.001124">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle player without handling component" time="0.0007167">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle invalid carried item entity reference" time="0.0011267">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle empty entities array" time="0.0016678">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle no items at player position" time="0.0030505">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/RenderSystem.test.ts" timestamp="2025-07-20T20:50:18.038Z" hostname="XLW-CND1300JDV" tests="6" failures="0" errors="0" skipped="0" time="0.0134913">
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; Rendering System with Mocked Pixi.js &gt; should be testable with mocked Pixi.js components" time="0.0079273">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; Rendering System with Mocked Pixi.js &gt; should work with mocked graphics objects" time="0.0007739">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; Rendering System with Mocked Pixi.js &gt; should handle entity lifecycle correctly with mocks" time="0.0009608">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; System Edge Cases &gt; should handle empty entity arrays" time="0.0007019">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; System Edge Cases &gt; should manage container positioning" time="0.0005739">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; System Edge Cases &gt; should clean up removed entities" time="0.0005545">
        </testcase>
    </testsuite>
    <testsuite name="src/game/utils/__tests__/Atoms.test.ts" timestamp="2025-07-20T20:50:18.041Z" hostname="XLW-CND1300JDV" tests="37" failures="0" errors="0" skipped="0" time="0.0480001">
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; spritesheetsAtom and related functionality &gt; should initialize with empty spritesheet array" time="0.0097531">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; spritesheetsAtom and related functionality &gt; should add spritesheet using addSpritesheetAtom" time="0.0025981">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; spritesheetsAtom and related functionality &gt; should add multiple spritesheets maintaining order" time="0.0011204">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; spritesheetsAtom and related functionality &gt; should preserve existing spritesheets when adding new ones" time="0.0008509">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should return texture from spritesheet when found" time="0.0008955">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should return null when texture not found" time="0.0007077">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should search through multiple spritesheets" time="0.0007209">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should return first matching texture if found in multiple spritesheets" time="0.0005297">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should return null when no spritesheets exist" time="0.0007753">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should initialize mapConfigAtom as undefined" time="0.000736">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should update map config using updateMapConfigAtom" time="0.0007116">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should handle partial updates to map config" time="0.000703">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should overwrite existing properties in map config" time="0.0007029">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should handle update when mapConfigAtom is initially undefined" time="0.0007888">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should return tileSize from mapConfig when available" time="0.0005734">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should return 0 when mapConfig is undefined" time="0.0006797">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should return 0 when mapConfig exists but tileSize is undefined" time="0.0006245">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should return 0 when tileSize is null" time="0.0006321">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should handle various tileSize values correctly" time="0.0013998">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; entitiesAtom &gt; should initialize with empty entity array" time="0.000657">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; entitiesAtom &gt; should store and retrieve entities" time="0.000908">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; entitiesAtom &gt; should handle entity updates" time="0.0007496">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; systemsAtom &gt; should initialize with empty systems array" time="0.0006601">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; systemsAtom &gt; should store and retrieve systems" time="0.0009829">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapAtom &gt; should initialize with a new GameMap instance" time="0.0006606">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapAtom &gt; should allow setting a different GameMap instance" time="0.0008348">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should return undefined when no entities exist" time="0.00095">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should return undefined when no player component exists" time="0.0008119">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should return player entity when player component exists" time="0.0020825">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should return first player entity when multiple players exist" time="0.0009871">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should update when entities array changes" time="0.0008372">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; atom integration and state consistency &gt; should maintain independent state between different atoms" time="0.0008368">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; atom integration and state consistency &gt; should handle derived atom updates when base atoms change" time="0.0008922">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; atom integration and state consistency &gt; should handle playerAtom updates when entitiesAtom changes" time="0.0010267">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; error handling and edge cases &gt; should handle null/undefined values gracefully where supported" time="0.0017798">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; error handling and edge cases &gt; should handle empty arrays and objects" time="0.0007753">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; error handling and edge cases &gt; should handle malformed spritesheet objects" time="0.0007902">
        </testcase>
    </testsuite>
    <testsuite name="src/game/utils/__tests__/ecsUtils.test.ts" timestamp="2025-07-20T20:50:18.050Z" hostname="XLW-CND1300JDV" tests="6" failures="0" errors="0" skipped="0" time="0.043286">
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; getEmptyPosition Integration &gt; should be available as an exported function" time="0.0363724">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should define proper Entity type structure" time="0.0011511">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should support entity with components" time="0.0007823">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should support empty entity" time="0.001209">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should support entity ID generation patterns" time="0.0007556">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should handle complex component combinations" time="0.000862">
        </testcase>
    </testsuite>
    <testsuite name="src/game/utils/__tests__/EntityFactory.test.ts" timestamp="2025-07-20T20:50:18.052Z" hostname="XLW-CND1300JDV" tests="11" failures="0" errors="0" skipped="0" time="0.0142201">
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; Function Exports &gt; should export createEntityFromTemplate function" time="0.002165">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; Function Exports &gt; should export createEntitiesFromTemplates function" time="0.0007165">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntityFromTemplate &gt; should create entity with generated ID" time="0.0010417">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntityFromTemplate &gt; should create entity with position component" time="0.0009332">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntityFromTemplate &gt; should create entity with player component" time="0.0007495">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntityFromTemplate &gt; should handle empty template" time="0.0014338">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntitiesFromTemplates &gt; should handle empty templates" time="0.0013498">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntitiesFromTemplates &gt; should create multiple entities from valid templates" time="0.0009614">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntitiesFromTemplates &gt; should maintain template independence" time="0.0009911">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; EntityTemplate Interface &gt; should support component template structure" time="0.0012254">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; EntityTemplate Interface &gt; should support template validation" time="0.0004814">
        </testcase>
    </testsuite>
    <testsuite name="src/game/utils/__tests__/EntityUtils.test.ts" timestamp="2025-07-20T20:50:18.055Z" hostname="XLW-CND1300JDV" tests="13" failures="0" errors="0" skipped="0" time="0.0226925">
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export addEntity function" time="0.0069109">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export addEntities function" time="0.0011742">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export removeEntity function" time="0.0010675">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export removeEntities function" time="0.0006631">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export getEntitiesWithComponents function" time="0.0006958">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export getEntity function" time="0.0006614">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntitiesWithComponents &gt; should filter entities by components" time="0.0020555">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntitiesWithComponents &gt; should handle multiple required components" time="0.000956">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntitiesWithComponents &gt; should return empty array when no entities match" time="0.0010258">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntity &gt; should find entity by ID from store" time="0.0009079">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntity &gt; should return undefined for non-existent ID" time="0.000865">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntity &gt; should handle empty entities array" time="0.0010518">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Entity Store Integration &gt; should interact with store for entity operations" time="0.0023875">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" timestamp="2025-07-20T20:50:18.059Z" hostname="XLW-CND1300JDV" tests="28" failures="0" errors="0" skipped="0" time="0.0377172">
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Creation &gt; should create a carried item component with valid item name" time="0.0098635">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Creation &gt; should create component with different item types" time="0.0018312">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Creation &gt; should create component with empty string item" time="0.0012588">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Creation &gt; should create component with whitespace item name" time="0.001007">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Validation &gt; should handle special characters in item names" time="0.0017154">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Validation &gt; should handle unicode characters in item names" time="0.0012185">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Validation &gt; should handle very long item names" time="0.0009023">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Validation &gt; should handle numeric strings as item names" time="0.001204">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Type &gt; should always have the correct component type" time="0.0011174">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Type &gt; should maintain type consistency across instances" time="0.0011901">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Modification &gt; should allow direct item property modification" time="0.0008902">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Modification &gt; should handle item swapping scenarios" time="0.000879">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Modification &gt; should handle item clearing" time="0.0008265">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Inventory Management &gt; should support item identification" time="0.0008262">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Inventory Management &gt; should support item categorization" time="0.0009857">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Inventory Management &gt; should support item stack simulation" time="0.000936">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Game Logic Integration &gt; should work with item usage systems" time="0.00074">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Game Logic Integration &gt; should support item dropping mechanics" time="0.0004112">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Game Logic Integration &gt; should work with quest item tracking" time="0.0004012">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0003563">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Serialization Compatibility &gt; should handle special characters in serialization" time="0.000506">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Serialization Compatibility &gt; should serialize empty items correctly" time="0.0004131">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Serialization Compatibility &gt; should handle array serialization of inventory" time="0.0011393">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Equality and Comparison &gt; should create distinct instances with different items" time="0.0011296">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Equality and Comparison &gt; should support item-based comparison" time="0.0004361">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Equality and Comparison &gt; should support case-sensitive item comparison" time="0.0004241">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Edge Cases &gt; should handle null-like strings" time="0.000625">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Edge Cases &gt; should preserve string formatting" time="0.0004221">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" timestamp="2025-07-20T20:50:18.066Z" hostname="XLW-CND1300JDV" tests="32" failures="0" errors="0" skipped="0" time="0.034054">
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Creation &gt; should create a handling component" time="0.0076333">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.001522">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Type &gt; should always have the correct component type" time="0.0012171">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0010546">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0011576">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.000716">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0006107">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; ECS Integration &gt; should be usable as a filter component for handling systems" time="0.0004129">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0014489">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.000577">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; ECS Integration &gt; should integrate with handling game mechanics" time="0.0005084">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Interaction Handling Logic &gt; should indicate active interaction handling state" time="0.0004375">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Interaction Handling Logic &gt; should work with interaction processing systems" time="0.00059">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Interaction Handling Logic &gt; should support interaction queue management" time="0.0004748">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Game System Integration &gt; should work with input handling systems" time="0.0004358">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Game System Integration &gt; should support event handling mechanics" time="0.0004944">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Game System Integration &gt; should work with command processing systems" time="0.0008801">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Game System Integration &gt; should integrate with state machine transitions" time="0.000386">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Concurrency and Processing &gt; should support concurrent handling operations" time="0.0005672">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Concurrency and Processing &gt; should work with handling priority systems" time="0.0004199">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Concurrency and Processing &gt; should support handling delegation patterns" time="0.0004079">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0003299">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0003671">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple handlers" time="0.0005134">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Serialization Compatibility &gt; should preserve handling state in save files" time="0.0006662">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Lifecycle &gt; should represent active handling state" time="0.0003283">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Lifecycle &gt; should support handling state transitions" time="0.0003117">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Equality &gt; should create distinct instances" time="0.000606">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.0003027">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Performance Characteristics &gt; should create components efficiently for frequent handling operations" time="0.0008176">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Error Handling and Edge Cases &gt; should maintain consistency under rapid creation/destruction" time="0.003882">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Error Handling and Edge Cases &gt; should work with complex handling scenarios" time="0.0004883">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" timestamp="2025-07-20T20:50:18.074Z" hostname="XLW-CND1300JDV" tests="29" failures="0" errors="0" skipped="0" time="0.0379999">
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Creation &gt; should create an interacting component" time="0.0103999">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0010801">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Type &gt; should always have the correct component type" time="0.000705">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0008735">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0012038">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0008177">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0009913">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; ECS Integration &gt; should be usable as a filter component for interaction systems" time="0.0007075">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0023897">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.001113">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; ECS Integration &gt; should integrate with interaction game mechanics" time="0.0009835">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Game State Management &gt; should indicate active interaction state" time="0.0006871">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Game State Management &gt; should work with interaction state tracking" time="0.0006309">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Game State Management &gt; should support interaction session management" time="0.0007554">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Interaction System Integration &gt; should work with player-NPC interaction systems" time="0.0004881">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Interaction System Integration &gt; should support object interaction mechanics" time="0.000538">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Interaction System Integration &gt; should work with interaction cooldown systems" time="0.0005162">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Interaction System Integration &gt; should integrate with interaction range detection" time="0.0003898">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0003688">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.00064">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple interactions" time="0.0011265">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Serialization Compatibility &gt; should preserve interaction state in save files" time="0.0006702">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Lifecycle &gt; should represent temporary interaction state" time="0.0006418">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Lifecycle &gt; should support interaction state transitions" time="0.0005629">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Equality &gt; should create distinct instances" time="0.0008521">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.0004807">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Performance Characteristics &gt; should create components efficiently for frequent interaction state changes" time="0.0013888">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Multi-Entity Interaction Scenarios &gt; should support multiple simultaneous interactions" time="0.0006988">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Multi-Entity Interaction Scenarios &gt; should work with interaction exclusivity checks" time="0.000715">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" timestamp="2025-07-20T20:50:18.082Z" hostname="XLW-CND1300JDV" tests="17" failures="0" errors="0" skipped="0" time="0.0275274">
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Creation &gt; should create a movable component" time="0.0104875">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0012449">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Type &gt; should always have the correct component type" time="0.0007121">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0006489">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0011331">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0007233">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0005771">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; ECS Integration &gt; should be usable as a filter component in ECS systems" time="0.0004402">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0021211">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0009408">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0006415">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0005862">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple components" time="0.0008497">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Equality &gt; should create distinct instances" time="0.000753">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Equality &gt; should support type-based comparison" time="0.0005742">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Immutability &gt; should have stable type after creation" time="0.0007236">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Performance Characteristics &gt; should create components efficiently" time="0.0008995">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" timestamp="2025-07-20T20:50:18.088Z" hostname="XLW-CND1300JDV" tests="19" failures="0" errors="0" skipped="0" time="0.0235172">
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Creation &gt; should create a pickable component" time="0.0064999">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0010596">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Type &gt; should always have the correct component type" time="0.0007236">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.000664">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0011364">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0007263">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.00057">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; ECS Integration &gt; should be usable as a filter component for pickup systems" time="0.0004228">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0017109">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0008915">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; ECS Integration &gt; should integrate with pickup game mechanics" time="0.0005877">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0005618">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0006857">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple components" time="0.0006764">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Equality &gt; should create distinct instances" time="0.0007681">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.000601">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Game Logic Integration &gt; should support item identification for pickup systems" time="0.000356">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Game Logic Integration &gt; should work with inventory management systems" time="0.0006277">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Performance Characteristics &gt; should create components efficiently" time="0.0007373">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" timestamp="2025-07-20T20:50:18.092Z" hostname="XLW-CND1300JDV" tests="34" failures="0" errors="0" skipped="0" time="0.032163">
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Creation &gt; should create a player component" time="0.0076421">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0012883">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Type &gt; should always have the correct component type" time="0.0007182">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0006393">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0013186">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0007814">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0007895">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; ECS Integration &gt; should be usable as a filter component for player systems" time="0.0009999">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.000977">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.000621">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; ECS Integration &gt; should integrate with player-specific systems" time="0.0005333">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Player State Management &gt; should indicate player entity status" time="0.0004268">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Player State Management &gt; should work with player identification systems" time="0.0012246">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Player State Management &gt; should support player-specific game logic" time="0.0005447">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Game State Integration &gt; should work with save/load systems" time="0.0004265">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Game State Integration &gt; should support player state persistence" time="0.0005407">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Game State Integration &gt; should integrate with player progression systems" time="0.0004939">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0014067">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.000409">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple player components" time="0.0005268">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Serialization Compatibility &gt; should preserve player state in save files" time="0.0003905">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Equality &gt; should create distinct instances" time="0.0005108">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.0003995">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Performance Characteristics &gt; should create components efficiently for large player counts" time="0.0007552">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Edge Cases and Invalid States &gt; should handle multiple player components on same entity" time="0.0004227">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Edge Cases and Invalid States &gt; should work with empty component arrays" time="0.0004603">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Edge Cases and Invalid States &gt; should handle null/undefined component checks gracefully" time="0.0003767">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; State Transition Testing &gt; should maintain consistent state during component lifecycle" time="0.0003443">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; State Transition Testing &gt; should support valid state transitions in game systems" time="0.0003582">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; State Transition Testing &gt; should prevent invalid state transitions" time="0.0005238">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Advanced Game Mechanics &gt; should support single-player game mechanics" time="0.0003748">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Advanced Game Mechanics &gt; should work with multiplayer identification systems" time="0.000396">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Advanced Game Mechanics &gt; should support player-specific input handling" time="0.0004422">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Advanced Game Mechanics &gt; should integrate with player-specific camera systems" time="0.0003915">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" timestamp="2025-07-20T20:50:18.101Z" hostname="XLW-CND1300JDV" tests="15" failures="0" errors="0" skipped="0" time="0.0187842">
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Creation &gt; should create a position component with valid coordinates" time="0.0070521">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Creation &gt; should create component with zero coordinates" time="0.0011011">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Creation &gt; should create component with negative coordinates" time="0.00111">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Creation &gt; should create component with fractional coordinates" time="0.0006733">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Validation &gt; should handle very large coordinate values" time="0.0007219">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Validation &gt; should handle very small coordinate values" time="0.0006396">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Validation &gt; should handle Infinity values" time="0.0005581">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Edge Cases &gt; should handle NaN coordinates" time="0.0007483">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Edge Cases &gt; should handle mixed valid and invalid coordinates" time="0.0007318">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Type &gt; should always have the correct component type" time="0.0005705">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Type &gt; should maintain type consistency across instances" time="0.0005207">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Modification &gt; should allow direct property modification" time="0.0004716">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Modification &gt; should handle property modification with edge values" time="0.0005206">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0005501">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Serialization Compatibility &gt; should handle serialization with special values" time="0.000449">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" timestamp="2025-07-20T20:50:18.105Z" hostname="XLW-CND1300JDV" tests="29" failures="0" errors="0" skipped="0" time="0.0291512">
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Creation &gt; should create a render in sidebar component" time="0.0073673">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0010038">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Type &gt; should always have the correct component type" time="0.0009325">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0007612">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0013738">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0008454">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0007628">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; ECS Integration &gt; should be usable as a filter component for sidebar rendering systems" time="0.0006153">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0018987">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0006494">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; ECS Integration &gt; should integrate with UI rendering systems" time="0.0005152">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; UI System Integration &gt; should indicate sidebar rendering requirement" time="0.0004307">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; UI System Integration &gt; should work with sidebar layout systems" time="0.0007974">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; UI System Integration &gt; should support UI element categorization" time="0.0006824">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Rendering System Integration &gt; should work with dual-pane rendering systems" time="0.0007789">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Rendering System Integration &gt; should support conditional rendering logic" time="0.0006176">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Rendering System Integration &gt; should integrate with layout management" time="0.0003822">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Rendering System Integration &gt; should work with responsive UI systems" time="0.0004934">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0003484">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0003192">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple sidebar components" time="0.0006002">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Serialization Compatibility &gt; should preserve UI state in save files" time="0.0004852">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Equality &gt; should create distinct instances" time="0.0005938">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.0003051">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Performance Characteristics &gt; should create components efficiently for UI operations" time="0.0007384">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Game UI Integration &gt; should support inventory sidebar rendering" time="0.0003082">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Game UI Integration &gt; should work with minimap sidebar rendering" time="0.0003943">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Game UI Integration &gt; should support status display in sidebar" time="0.0005485">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Game UI Integration &gt; should handle dynamic sidebar content" time="0.0003444">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" timestamp="2025-07-20T20:50:18.112Z" hostname="XLW-CND1300JDV" tests="31" failures="0" errors="0" skipped="0" time="0.0464341">
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Creation &gt; should create a sprite component with valid sprite name" time="0.0121672">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Creation &gt; should create component with different sprite types" time="0.0042265">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Creation &gt; should set sprite size from tile size atom" time="0.0015971">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Error Handling &gt; should throw error when texture is not found" time="0.0019367">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Error Handling &gt; should handle different invalid sprite names" time="0.0016172">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Error Handling &gt; should provide meaningful error messages" time="0.0008636">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Type &gt; should always have the correct component type" time="0.0007655">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Type &gt; should maintain type consistency across instances" time="0.0007425">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Pixi.js Integration &gt; should create Pixi.js Sprite instance" time="0.0009036">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Pixi.js Integration &gt; should pass texture to Pixi.js Sprite constructor" time="0.0009068">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Pixi.js Integration &gt; should handle different texture sizes" time="0.0008973">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Sprite Properties &gt; should have access to sprite properties" time="0.0006622">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Sprite Properties &gt; should allow sprite property modification" time="0.0007963">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Sprite Properties &gt; should support sprite visibility toggle" time="0.0006823">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Tile Size Integration &gt; should use different tile sizes" time="0.001034">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Tile Size Integration &gt; should handle non-square tile sizes" time="0.0008633">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Tile Size Integration &gt; should call setSize on sprite creation" time="0.000525">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Rendering System Integration &gt; should be compatible with rendering systems" time="0.0005087">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Rendering System Integration &gt; should support sprite positioning" time="0.000509">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Rendering System Integration &gt; should work with sprite transformation" time="0.0004748">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Resource Management &gt; should handle sprite cleanup" time="0.0007314">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Resource Management &gt; should support sprite destruction" time="0.0005967">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Different Sprite Types &gt; should handle player sprites" time="0.0006667">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Different Sprite Types &gt; should handle environment sprites" time="0.0010562">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Different Sprite Types &gt; should handle item sprites" time="0.0009509">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Edge Cases &gt; should handle empty sprite names" time="0.0004988">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Edge Cases &gt; should handle special character sprite names" time="0.0011103">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Edge Cases &gt; should handle very long sprite names" time="0.0006834">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Serialization Considerations &gt; should have serializable component type" time="0.0005018">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Serialization Considerations &gt; should handle component identification" time="0.0005629">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Serialization Considerations &gt; should preserve sprite reference for ECS operations" time="0.0005937">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" timestamp="2025-07-20T20:50:18.119Z" hostname="XLW-CND1300JDV" tests="22" failures="0" errors="0" skipped="0" time="0.0305564">
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create a velocity component with valid velocity values" time="0.0122505">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create component with zero velocity" time="0.0014003">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create component with positive velocities" time="0.0011369">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create component with negative velocities" time="0.0006904">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create component with fractional velocities" time="0.0007792">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Validation &gt; should handle very large velocity values" time="0.0012141">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Validation &gt; should handle very small velocity values" time="0.0011187">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Validation &gt; should handle very small positive values" time="0.0008947">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Validation &gt; should handle Infinity values" time="0.0009765">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Edge Cases &gt; should handle NaN velocities" time="0.0006375">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Edge Cases &gt; should handle mixed valid and invalid velocities" time="0.0005329">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Edge Cases &gt; should handle negative zero values" time="0.0005072">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Type &gt; should always have the correct component type" time="0.0005297">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Type &gt; should maintain type consistency across instances" time="0.0004994">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Modification &gt; should allow direct property modification" time="0.0006821">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Modification &gt; should handle velocity direction changes" time="0.0006512">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Modification &gt; should handle velocity magnitude changes" time="0.0005057">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Physics Calculations Compatibility &gt; should support velocity magnitude calculation" time="0.0003424">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Physics Calculations Compatibility &gt; should support velocity normalization" time="0.0004549">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Physics Calculations Compatibility &gt; should handle zero velocity normalization gracefully" time="0.0003119">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0004329">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Serialization Compatibility &gt; should handle serialization with zero values" time="0.0003489">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" timestamp="2025-07-20T20:50:18.124Z" hostname="XLW-CND1300JDV" tests="32" failures="0" errors="0" skipped="0" time="0.0299916">
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Creation &gt; should create a walkable component" time="0.0074135">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0008926">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Type &gt; should always have the correct component type" time="0.0007254">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0006141">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0012478">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0008186">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0006229">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; ECS Integration &gt; should be usable as a filter component for collision systems" time="0.0004104">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0014524">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0006075">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; ECS Integration &gt; should integrate with movement systems" time="0.0004906">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Collision Detection Integration &gt; should indicate walkable terrain" time="0.00042">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Collision Detection Integration &gt; should work with pathfinding systems" time="0.0007366">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Collision Detection Integration &gt; should support collision boundary detection" time="0.0005031">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Movement System Integration &gt; should work with player movement validation" time="0.0005054">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Movement System Integration &gt; should support NPC movement systems" time="0.0005399">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Movement System Integration &gt; should integrate with movement speed calculations" time="0.0003674">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Movement System Integration &gt; should work with dynamic terrain changes" time="0.0003587">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Game Map Integration &gt; should support tile-based collision detection" time="0.0003549">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Game Map Integration &gt; should work with procedural map generation" time="0.0003545">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Game Map Integration &gt; should support multi-layer map systems" time="0.0004846">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0004172">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0003688">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Serialization Compatibility &gt; should handle map serialization with walkable components" time="0.0005698">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Serialization Compatibility &gt; should preserve terrain state in save files" time="0.0005293">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Equality &gt; should create distinct instances" time="0.0005295">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Equality &gt; should support type-based comparison for collision systems" time="0.000287">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Performance Characteristics &gt; should create components efficiently for large maps" time="0.0019021">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Advanced Game Mechanics &gt; should support conditional walkability" time="0.0008278">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Advanced Game Mechanics &gt; should work with teleportation systems" time="0.0006435">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Advanced Game Mechanics &gt; should support area-of-effect movement restrictions" time="0.0004023">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Advanced Game Mechanics &gt; should integrate with physics-based movement" time="0.0003082">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" timestamp="2025-07-20T20:50:18.131Z" hostname="XLW-CND1300JDV" tests="11" failures="0" errors="0" skipped="0" time="0.0228035">
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; System Initialization &gt; should verify system interface compatibility" time="0.0087032">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; System Initialization &gt; should handle placement operations through mocked dependencies" time="0.0009262">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Bresenham Line Algorithm &gt; should calculate points between two positions" time="0.0009155">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Bresenham Line Algorithm &gt; should handle horizontal line drawing" time="0.0008058">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Bresenham Line Algorithm &gt; should handle vertical line drawing" time="0.0007178">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Placement Logic &gt; should use screen to grid coordinate conversion" time="0.0019214">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Placement Logic &gt; should create entities from templates" time="0.003202">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Placement Logic &gt; should handle component checking for existing entities" time="0.0009199">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Management Integration &gt; should add new entities through EntityUtils" time="0.0009297">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Management Integration &gt; should remove entities through EntityUtils" time="0.0007559">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Management Integration &gt; should handle empty entity operations" time="0.0006596">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" timestamp="2025-07-20T20:50:18.134Z" hostname="XLW-CND1300JDV" tests="6" failures="0" errors="0" skipped="0" time="0.012464">
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Sidebar UI Rendering &gt; should handle sidebar rendering with mocked Pixi.js components" time="0.0069906">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Sidebar UI Rendering &gt; should render entities with RenderInSidebar component" time="0.0008446">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Sidebar UI Rendering &gt; should manage sidebar container positioning" time="0.0008739">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Entity Filtering and Management &gt; should filter entities by required components" time="0.0007454">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Entity Filtering and Management &gt; should handle entity lifecycle in sidebar" time="0.0006106">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Entity Filtering and Management &gt; should integrate with component system" time="0.0005614">
        </testcase>
    </testsuite>
</testsuites>
