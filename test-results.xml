<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="526" failures="0" errors="0" time="34.536">
    <testsuite name="src/__tests__/pixiMocks.test.ts" timestamp="2025-07-21T00:07:00.932Z" hostname="XLW-CND1300JDV" tests="14" failures="0" errors="0" skipped="0" time="0.0441717">
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Constructors &gt; should create Container instances" time="0.0102786">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Constructors &gt; should create Sprite instances" time="0.0026147">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Constructors &gt; should create Graphics instances" time="0.0022296">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Constructors &gt; should create Application instances" time="0.0036874">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Functionality &gt; should handle Container child management" time="0.0034474">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Functionality &gt; should handle Graphics method chaining" time="0.0021859">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Functionality &gt; should handle Application initialization" time="0.0021279">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Functionality &gt; should handle Ticker functionality" time="0.0011357">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Assets and Texture Management &gt; should handle texture loading" time="0.0013242">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Assets and Texture Management &gt; should handle texture creation from sources" time="0.0020605">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Assets and Texture Management &gt; should handle spritesheet parsing" time="0.0019293">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Mock Setup and Cleanup &gt; should clear mock history with setupPixiMocks" time="0.001739">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Integration with Existing Code Patterns &gt; should work with pixiApp global pattern" time="0.0022039">
        </testcase>
        <testcase classname="src/__tests__/pixiMocks.test.ts" name="Pixi.js Mocks &gt; Integration with Existing Code Patterns &gt; should work with container hierarchy patterns" time="0.0026307">
        </testcase>
    </testsuite>
    <testsuite name="src/__tests__/pixiMocksIntegration.test.ts" timestamp="2025-07-21T00:07:00.955Z" hostname="XLW-CND1300JDV" tests="7" failures="0" errors="0" skipped="0" time="0.0337813">
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Application creation pattern" time="0.017104">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Container hierarchy pattern" time="0.0025601">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Assets loading pattern" time="0.0013647">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Spritesheet pattern" time="0.0023874">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Sprite creation pattern" time="0.0027164">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Graphics drawing pattern" time="0.0026947">
        </testcase>
        <testcase classname="src/__tests__/pixiMocksIntegration.test.ts" name="Pixi.js Mocks Integration with Game Code &gt; should work with Ticker pattern" time="0.0020109">
        </testcase>
    </testsuite>
    <testsuite name="src/__tests__/simple.test.ts" timestamp="2025-07-21T00:07:00.960Z" hostname="XLW-CND1300JDV" tests="1" failures="0" errors="0" skipped="0" time="0.0111007">
        <testcase classname="src/__tests__/simple.test.ts" name="Component Types &gt; should have all expected component types" time="0.0089366">
        </testcase>
    </testsuite>
    <testsuite name="src/__tests__/testUtils.test.ts" timestamp="2025-07-21T00:07:00.961Z" hostname="XLW-CND1300JDV" tests="14" failures="0" errors="0" skipped="0" time="0.0331998">
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Entity Factory Functions &gt; should create a test entity with no components" time="0.0035724">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Entity Factory Functions &gt; should create a test entity with provided components" time="0.0012976">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Entity Factory Functions &gt; should create test components of all types" time="0.001444">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Entity Factory Functions &gt; should create entity with multiple components using factory" time="0.0014401">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Component Assertion Helpers &gt; should correctly assert entity has component" time="0.0033291">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Component Assertion Helpers &gt; should correctly assert entity does not have component" time="0.0020558">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Component Assertion Helpers &gt; should correctly assert component properties" time="0.0019083">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; System Testing Utilities &gt; should create test update args" time="0.0021601">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; System Testing Utilities &gt; should create mock game map" time="0.0013004">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; System Testing Utilities &gt; should create mock game map with entities" time="0.0033002">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Test Environment &gt; should create isolated test environment" time="0.0014494">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Test Environment &gt; should manage entities in test environment" time="0.003197">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Advanced Utilities &gt; should create multiple test entities" time="0.0016655">
        </testcase>
        <testcase classname="src/__tests__/testUtils.test.ts" name="ECS Test Utilities &gt; Advanced Utilities &gt; should find entities with specific components" time="0.0012506">
        </testcase>
    </testsuite>
    <testsuite name="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" timestamp="2025-07-21T00:07:00.965Z" hostname="XLW-CND1300JDV" tests="11" failures="0" errors="0" skipped="0" time="0.0546958">
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Instantiation and Basic Operation &gt; should instantiate all systems without errors" time="0.0075599">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Instantiation and Basic Operation &gt; should run all systems without throwing errors" time="0.0045496">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Instantiation and Basic Operation &gt; should handle systems with entities but no matching components" time="0.0036903">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Integration Verification &gt; should demonstrate systems can work with mocked dependencies" time="0.0032638">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Integration Verification &gt; should handle systems processing with component operations" time="0.0039629">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Coordination and Coexistence &gt; should run multiple systems in sequence without interference" time="0.0039702">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Coordination and Coexistence &gt; should handle rapid sequential system updates without state conflicts" time="0.0076372">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; System Coordination and Coexistence &gt; should maintain system independence with different entity sets" time="0.0038496">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; Error Handling and Robustness &gt; should handle null or undefined entities gracefully" time="0.004122">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; Error Handling and Robustness &gt; should handle component operation failures gracefully" time="0.0021851">
        </testcase>
        <testcase classname="src/game/__tests__/ecsSystemIntegrationBasic.test.ts" name="ECS System Integration Tests &gt; Error Handling and Robustness &gt; should continue functioning after mock function failures" time="0.002742">
        </testcase>
    </testsuite>
    <testsuite name="src/game/__tests__/gameplayScenarios-realJotai.test.ts" timestamp="2025-07-21T00:07:00.970Z" hostname="XLW-CND1300JDV" tests="1" failures="0" errors="0" skipped="0" time="0.0160265">
        <testcase classname="src/game/__tests__/gameplayScenarios-realJotai.test.ts" name="Core Gameplay Scenarios - Real Jotai Integration &gt; Complete Player Movement Workflow &gt; should handle complete movement workflow using real Jotai state: input → velocity → position" time="0.0131773">
        </testcase>
    </testsuite>
    <testsuite name="src/game/map/__tests__/MappingUtils.test.ts" timestamp="2025-07-21T00:07:00.971Z" hostname="XLW-CND1300JDV" tests="29" failures="0" errors="0" skipped="0" time="0.0466635">
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should convert grid position to screen coordinates using default tile size" time="0.0149692">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should convert grid position to screen coordinates using provided tile size" time="0.0025472">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle zero coordinates" time="0.001879">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle negative coordinates" time="0.001006">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle large coordinates" time="0.0009672">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle fractional coordinates by preserving them in calculation" time="0.0018142">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreen &gt; should handle zero tile size" time="0.0010277">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should convert grid position to screen coordinates tuple using default tile size" time="0.0010024">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should convert grid position using custom tile size and no gap" time="0.0009231">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should convert grid position using default tile size with gap" time="0.0013348">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should convert grid position using custom tile size and gap" time="0.0011936">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should handle zero coordinates" time="0.0009153">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should handle negative coordinates" time="0.0010477">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should handle zero gap" time="0.0009547">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; gridToScreenAsTuple &gt; should handle negative gap" time="0.0009272">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should convert screen position to grid coordinates using default tile size" time="0.0018526">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should convert screen position to grid coordinates using provided tile size" time="0.0008931">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle zero coordinates" time="0.0005669">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle negative coordinates by flooring toward negative infinity" time="0.0005417">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle fractional coordinates by flooring" time="0.000903">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle exact tile boundaries" time="0.0006466">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; screenToGrid &gt; should handle large coordinates" time="0.0005483">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; bidirectional conversion consistency &gt; should maintain consistency between gridToScreen and screenToGrid for integer coordinates" time="0.0006952">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; bidirectional conversion consistency &gt; should maintain consistency for multiple coordinate pairs" time="0.0007625">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; bidirectional conversion consistency &gt; should handle consistency with custom tile sizes" time="0.0003892">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; boundary conditions and edge cases &gt; should handle very small tile sizes" time="0.0003913">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; boundary conditions and edge cases &gt; should handle very large tile sizes" time="0.0003874">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; boundary conditions and edge cases &gt; should handle fractional tile sizes" time="0.000537">
        </testcase>
        <testcase classname="src/game/map/__tests__/MappingUtils.test.ts" name="MappingUtils &gt; boundary conditions and edge cases &gt; should handle when store.get returns undefined/null for tile size" time="0.0004893">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/CleanUpSystem.test.ts" timestamp="2025-07-21T00:07:00.983Z" hostname="XLW-CND1300JDV" tests="13" failures="0" errors="0" skipped="0" time="0.046219">
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Entity Cleanup Operations &gt; should remove interacting components from entities" time="0.0096665">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Entity Cleanup Operations &gt; should handle entities without interacting components" time="0.003597">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Entity Cleanup Operations &gt; should handle mixed entities (some with, some without interacting)" time="0.0033621">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Entity Filtering &gt; should properly filter entities by interacting component" time="0.0024123">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Entity Filtering &gt; should handle entities with multiple components correctly" time="0.0022103">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Entity Filtering &gt; should process all interacting entities in a single update" time="0.00273">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Edge Cases &gt; should handle empty entities array" time="0.0035766">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Edge Cases &gt; should handle null/undefined entities array" time="0.0016969">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Edge Cases &gt; should handle undefined entities array" time="0.0019936">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; System Edge Cases &gt; should handle entities with null/undefined components" time="0.0020362">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Component Cleanup Verification &gt; should ensure interacting components are actually removed" time="0.0019047">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Component Cleanup Verification &gt; should preserve other components while removing interacting" time="0.0021368">
        </testcase>
        <testcase classname="src/game/systems/__tests__/CleanUpSystem.test.ts" name="CleanUpSystem &gt; Component Cleanup Verification &gt; should handle cleanup idempotently" time="0.0022369">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/KeyboardInputSystem.test.ts" timestamp="2025-07-21T00:07:00.986Z" hostname="XLW-CND1300JDV" tests="23" failures="0" errors="0" skipped="0" time="0.0688806">
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Key Event Processing &gt; should register keydown and keyup event listeners" time="0.0088382">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Key Event Processing &gt; should handle keydown events and mark as changed" time="0.004176">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Key Event Processing &gt; should handle keyup events and update state" time="0.0022186">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Key Event Processing &gt; should only update when keys have changed" time="0.0023784">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should set upward velocity on ArrowUp key" time="0.001566">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should set downward velocity on ArrowDown key" time="0.0013654">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should set leftward velocity on ArrowLeft key" time="0.0012371">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should set rightward velocity on ArrowRight key" time="0.0010518">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should handle diagonal movement with multiple keys" time="0.0019885">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should handle opposing keys correctly (last key wins)" time="0.0023234">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Movement Input Handling &gt; should reset velocity to zero when no movement keys are pressed" time="0.0016482">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should add InteractingComponent on E key press" time="0.0018512">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should add HandlingComponent on space key press" time="0.0011753">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should handle multiple interaction keys simultaneously" time="0.0011917">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should handle movement and interaction keys together" time="0.0016566">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; Interaction Input Handling &gt; should not add interaction components when keys are released" time="0.001883">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should handle empty entities array" time="0.0035672">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should handle null/undefined map" time="0.004602">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should require exactly one player entity" time="0.0029888">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should handle player entity without velocity component" time="0.0032562">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should handle unknown key presses gracefully" time="0.0028463">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should maintain key state correctly across multiple updates" time="0.0028117">
        </testcase>
        <testcase classname="src/game/systems/__tests__/KeyboardInputSystem.test.ts" name="KeyboardInputSystem &gt; System Edge Cases and Validation &gt; should properly reset hasChanged flag after processing" time="0.0017923">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/MovementSystem.test.ts" timestamp="2025-07-21T00:07:00.995Z" hostname="XLW-CND1300JDV" tests="17" failures="0" errors="0" skipped="0" time="0.0399819">
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; manual setComponent test for position" time="0.0041897">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should update entity position based on velocity" time="0.0040405">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should reset velocity to zero after processing" time="0.0020571">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should not move entity if velocity is zero" time="0.0016135">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should not move entity without position component" time="0.0032074">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Entity Position Updates &gt; should not move entity without velocity component" time="0.0020262">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should prevent movement to invalid map positions" time="0.002087">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should allow movement through pickable entities" time="0.0018208">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should prevent movement when blocked by immovable entity" time="0.0017492">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should push movable entities when possible" time="0.0011527">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; Collision Detection and Validation &gt; should prevent pushing when movable entity cannot move" time="0.0011361">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle empty entities array" time="0.0013045">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle null/undefined entities" time="0.0011409">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle null/undefined map" time="0.0011644">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle multiple entities with complex interactions" time="0.0013285">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle diagonal movement correctly" time="0.0013629">
        </testcase>
        <testcase classname="src/game/systems/__tests__/MovementSystem.test.ts" name="MovementSystem &gt; System Edge Cases and Validation &gt; should handle negative velocity correctly" time="0.0011756">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/PickupSystem.test.ts" timestamp="2025-07-21T00:07:01.000Z" hostname="XLW-CND1300JDV" tests="18" failures="0" errors="0" skipped="0" time="0.0695279">
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Item Collection Mechanics &gt; should pick up item when player has handling component and no carried item" time="0.0071781">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Item Collection Mechanics &gt; should place item when player has carried item component" time="0.0064426">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Item Collection Mechanics &gt; should handle multiple items at same position and pick up first one" time="0.0027218">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Entity State Changes During Pickup Operations &gt; should properly transition item from map to inventory" time="0.0022217">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Entity State Changes During Pickup Operations &gt; should properly transition item from inventory to map" time="0.0036603">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Entity State Changes During Pickup Operations &gt; should always remove handling component after processing" time="0.0028459">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Inventory Management and Item Handling &gt; should maintain item entity reference in carried item component" time="0.0017592">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Inventory Management and Item Handling &gt; should handle inventory state transitions correctly" time="0.0035362">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Inventory Management and Item Handling &gt; should not affect other player components during item operations" time="0.0023296">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; System Entity Filtering &gt; should only process pickable entities" time="0.0024824">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; System Entity Filtering &gt; should filter entities by position correctly" time="0.0029304">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; System Entity Filtering &gt; should require both position and pickable components for pickup" time="0.0019139">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle missing player entity gracefully" time="0.004175">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle player without position component" time="0.0042792">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle player without handling component" time="0.0019794">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle invalid carried item entity reference" time="0.002382">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle empty entities array" time="0.0020461">
        </testcase>
        <testcase classname="src/game/systems/__tests__/PickupSystem.test.ts" name="PickupSystem &gt; Failure Scenarios &gt; should handle no items at player position" time="0.0017701">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/__tests__/RenderSystem.test.ts" timestamp="2025-07-21T00:07:01.007Z" hostname="XLW-CND1300JDV" tests="6" failures="0" errors="0" skipped="0" time="0.0244616">
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; Rendering System with Mocked Pixi.js &gt; should be testable with mocked Pixi.js components" time="0.0126649">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; Rendering System with Mocked Pixi.js &gt; should work with mocked graphics objects" time="0.0017899">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; Rendering System with Mocked Pixi.js &gt; should handle entity lifecycle correctly with mocks" time="0.0016796">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; System Edge Cases &gt; should handle empty entity arrays" time="0.0025158">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; System Edge Cases &gt; should manage container positioning" time="0.0016725">
        </testcase>
        <testcase classname="src/game/systems/__tests__/RenderSystem.test.ts" name="RenderSystem &gt; System Edge Cases &gt; should clean up removed entities" time="0.001235">
        </testcase>
    </testsuite>
    <testsuite name="src/game/utils/__tests__/Atoms.test.ts" timestamp="2025-07-21T00:07:01.010Z" hostname="XLW-CND1300JDV" tests="37" failures="0" errors="0" skipped="0" time="0.0900857">
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; spritesheetsAtom and related functionality &gt; should initialize with empty spritesheet array" time="0.0175381">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; spritesheetsAtom and related functionality &gt; should add spritesheet using addSpritesheetAtom" time="0.0052791">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; spritesheetsAtom and related functionality &gt; should add multiple spritesheets maintaining order" time="0.0023155">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; spritesheetsAtom and related functionality &gt; should preserve existing spritesheets when adding new ones" time="0.0021707">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should return texture from spritesheet when found" time="0.0034683">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should return null when texture not found" time="0.0034315">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should search through multiple spritesheets" time="0.002128">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should return first matching texture if found in multiple spritesheets" time="0.0015844">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTexture function &gt; should return null when no spritesheets exist" time="0.001897">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should initialize mapConfigAtom as undefined" time="0.0022255">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should update map config using updateMapConfigAtom" time="0.0016881">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should handle partial updates to map config" time="0.0024091">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should overwrite existing properties in map config" time="0.0015326">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapConfigAtom and related functionality &gt; should handle update when mapConfigAtom is initially undefined" time="0.0017265">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should return tileSize from mapConfig when available" time="0.0012473">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should return 0 when mapConfig is undefined" time="0.0013759">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should return 0 when mapConfig exists but tileSize is undefined" time="0.0011342">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should return 0 when tileSize is null" time="0.0012101">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; getTileSizeAtom &gt; should handle various tileSize values correctly" time="0.0019016">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; entitiesAtom &gt; should initialize with empty entity array" time="0.0017035">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; entitiesAtom &gt; should store and retrieve entities" time="0.0014097">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; entitiesAtom &gt; should handle entity updates" time="0.0010919">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; systemsAtom &gt; should initialize with empty systems array" time="0.0011157">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; systemsAtom &gt; should store and retrieve systems" time="0.0015785">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapAtom &gt; should initialize with a new GameMap instance" time="0.000944">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; mapAtom &gt; should allow setting a different GameMap instance" time="0.0012085">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should return undefined when no entities exist" time="0.0009571">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should return undefined when no player component exists" time="0.00099">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should return player entity when player component exists" time="0.0032728">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should return first player entity when multiple players exist" time="0.001174">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; playerAtom &gt; should update when entities array changes" time="0.0014819">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; atom integration and state consistency &gt; should maintain independent state between different atoms" time="0.0013448">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; atom integration and state consistency &gt; should handle derived atom updates when base atoms change" time="0.0010276">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; atom integration and state consistency &gt; should handle playerAtom updates when entitiesAtom changes" time="0.0007776">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; error handling and edge cases &gt; should handle null/undefined values gracefully where supported" time="0.0027483">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; error handling and edge cases &gt; should handle empty arrays and objects" time="0.0008256">
        </testcase>
        <testcase classname="src/game/utils/__tests__/Atoms.test.ts" name="Atoms - Jotai State Management &gt; error handling and edge cases &gt; should handle malformed spritesheet objects" time="0.0012973">
        </testcase>
    </testsuite>
    <testsuite name="src/game/utils/__tests__/ecsUtils.test.ts" timestamp="2025-07-21T00:07:01.021Z" hostname="XLW-CND1300JDV" tests="6" failures="0" errors="0" skipped="0" time="0.0535561">
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; getEmptyPosition Integration &gt; should be available as an exported function" time="0.0412536">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should define proper Entity type structure" time="0.0020993">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should support entity with components" time="0.001577">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should support empty entity" time="0.0024069">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should support entity ID generation patterns" time="0.0014719">
        </testcase>
        <testcase classname="src/game/utils/__tests__/ecsUtils.test.ts" name="ecsUtils &gt; Entity Interface &gt; should handle complex component combinations" time="0.0011889">
        </testcase>
    </testsuite>
    <testsuite name="src/game/utils/__tests__/EntityFactory.test.ts" timestamp="2025-07-21T00:07:01.024Z" hostname="XLW-CND1300JDV" tests="11" failures="0" errors="0" skipped="0" time="0.0214578">
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; Function Exports &gt; should export createEntityFromTemplate function" time="0.0034468">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; Function Exports &gt; should export createEntitiesFromTemplates function" time="0.001173">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntityFromTemplate &gt; should create entity with generated ID" time="0.0015504">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntityFromTemplate &gt; should create entity with position component" time="0.0013861">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntityFromTemplate &gt; should create entity with player component" time="0.0009054">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntityFromTemplate &gt; should handle empty template" time="0.0019594">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntitiesFromTemplates &gt; should handle empty templates" time="0.0024773">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntitiesFromTemplates &gt; should create multiple entities from valid templates" time="0.0017948">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; createEntitiesFromTemplates &gt; should maintain template independence" time="0.0014708">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; EntityTemplate Interface &gt; should support component template structure" time="0.0011543">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityFactory.test.ts" name="EntityFactory &gt; EntityTemplate Interface &gt; should support template validation" time="0.000604">
        </testcase>
    </testsuite>
    <testsuite name="src/game/utils/__tests__/EntityUtils.test.ts" timestamp="2025-07-21T00:07:01.027Z" hostname="XLW-CND1300JDV" tests="13" failures="0" errors="0" skipped="0" time="0.0367262">
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export addEntity function" time="0.0127645">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export addEntities function" time="0.0022594">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export removeEntity function" time="0.0016882">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export removeEntities function" time="0.0012349">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export getEntitiesWithComponents function" time="0.0013162">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Function Exports &gt; should export getEntity function" time="0.0013465">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntitiesWithComponents &gt; should filter entities by components" time="0.0033088">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntitiesWithComponents &gt; should handle multiple required components" time="0.0013928">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntitiesWithComponents &gt; should return empty array when no entities match" time="0.0023077">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntity &gt; should find entity by ID from store" time="0.0015276">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntity &gt; should return undefined for non-existent ID" time="0.0009477">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; getEntity &gt; should handle empty entities array" time="0.0008257">
        </testcase>
        <testcase classname="src/game/utils/__tests__/EntityUtils.test.ts" name="EntityUtils &gt; Entity Store Integration &gt; should interact with store for entity operations" time="0.0021415">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" timestamp="2025-07-21T00:07:01.030Z" hostname="XLW-CND1300JDV" tests="28" failures="0" errors="0" skipped="0" time="0.0446874">
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Creation &gt; should create a carried item component with valid item name" time="0.0117507">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Creation &gt; should create component with different item types" time="0.0018571">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Creation &gt; should create component with empty string item" time="0.0017257">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Creation &gt; should create component with whitespace item name" time="0.0011786">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Validation &gt; should handle special characters in item names" time="0.0013813">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Validation &gt; should handle unicode characters in item names" time="0.0010372">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Validation &gt; should handle very long item names" time="0.0008973">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Validation &gt; should handle numeric strings as item names" time="0.0013775">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Type &gt; should always have the correct component type" time="0.0011464">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Type &gt; should maintain type consistency across instances" time="0.0012849">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Modification &gt; should allow direct item property modification" time="0.0011736">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Modification &gt; should handle item swapping scenarios" time="0.0011296">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Property Modification &gt; should handle item clearing" time="0.0012633">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Inventory Management &gt; should support item identification" time="0.0010904">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Inventory Management &gt; should support item categorization" time="0.0014186">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Inventory Management &gt; should support item stack simulation" time="0.0012864">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Game Logic Integration &gt; should work with item usage systems" time="0.0009931">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Game Logic Integration &gt; should support item dropping mechanics" time="0.0008233">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Game Logic Integration &gt; should work with quest item tracking" time="0.000481">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0006987">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Serialization Compatibility &gt; should handle special characters in serialization" time="0.000801">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Serialization Compatibility &gt; should serialize empty items correctly" time="0.0004922">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Serialization Compatibility &gt; should handle array serialization of inventory" time="0.0014705">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Equality and Comparison &gt; should create distinct instances with different items" time="0.0012309">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Equality and Comparison &gt; should support item-based comparison" time="0.0005239">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Component Equality and Comparison &gt; should support case-sensitive item comparison" time="0.0003712">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Edge Cases &gt; should handle null-like strings" time="0.0005714">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/CarriedItemComponent.test.ts" name="CarriedItemComponent &gt; Edge Cases &gt; should preserve string formatting" time="0.0004417">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" timestamp="2025-07-21T00:07:01.037Z" hostname="XLW-CND1300JDV" tests="32" failures="0" errors="0" skipped="0" time="0.0546223">
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Creation &gt; should create a handling component" time="0.0083138">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0016254">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Type &gt; should always have the correct component type" time="0.0009882">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0012431">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0023063">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0015034">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0013874">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; ECS Integration &gt; should be usable as a filter component for handling systems" time="0.001223">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0026448">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.000885">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; ECS Integration &gt; should integrate with handling game mechanics" time="0.0007967">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Interaction Handling Logic &gt; should indicate active interaction handling state" time="0.0005516">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Interaction Handling Logic &gt; should work with interaction processing systems" time="0.0007588">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Interaction Handling Logic &gt; should support interaction queue management" time="0.000933">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Game System Integration &gt; should work with input handling systems" time="0.0008786">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Game System Integration &gt; should support event handling mechanics" time="0.0009369">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Game System Integration &gt; should work with command processing systems" time="0.0008145">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Game System Integration &gt; should integrate with state machine transitions" time="0.000543">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Concurrency and Processing &gt; should support concurrent handling operations" time="0.0008859">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Concurrency and Processing &gt; should work with handling priority systems" time="0.0010982">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Concurrency and Processing &gt; should support handling delegation patterns" time="0.0008087">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0007686">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.000931">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple handlers" time="0.0010768">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Serialization Compatibility &gt; should preserve handling state in save files" time="0.0010667">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Lifecycle &gt; should represent active handling state" time="0.0006743">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Lifecycle &gt; should support handling state transitions" time="0.0006039">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Equality &gt; should create distinct instances" time="0.0010398">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.0005413">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Performance Characteristics &gt; should create components efficiently for frequent handling operations" time="0.0017155">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Error Handling and Edge Cases &gt; should maintain consistency under rapid creation/destruction" time="0.0082704">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/HandlingComponent.test.ts" name="HandlingComponent &gt; Error Handling and Edge Cases &gt; should work with complex handling scenarios" time="0.0011624">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" timestamp="2025-07-21T00:07:01.051Z" hostname="XLW-CND1300JDV" tests="29" failures="0" errors="0" skipped="0" time="0.0480045">
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Creation &gt; should create an interacting component" time="0.0117976">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0027597">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Type &gt; should always have the correct component type" time="0.0018298">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0018228">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0024057">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0013696">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0011491">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; ECS Integration &gt; should be usable as a filter component for interaction systems" time="0.0007753">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.002832">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0011755">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; ECS Integration &gt; should integrate with interaction game mechanics" time="0.0013775">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Game State Management &gt; should indicate active interaction state" time="0.0010149">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Game State Management &gt; should work with interaction state tracking" time="0.0008598">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Game State Management &gt; should support interaction session management" time="0.0008037">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Interaction System Integration &gt; should work with player-NPC interaction systems" time="0.0007829">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Interaction System Integration &gt; should support object interaction mechanics" time="0.0007123">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Interaction System Integration &gt; should work with interaction cooldown systems" time="0.0005613">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Interaction System Integration &gt; should integrate with interaction range detection" time="0.000495">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0003914">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0004934">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple interactions" time="0.0006877">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Serialization Compatibility &gt; should preserve interaction state in save files" time="0.0004402">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Lifecycle &gt; should represent temporary interaction state" time="0.000457">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Lifecycle &gt; should support interaction state transitions" time="0.0003805">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Equality &gt; should create distinct instances" time="0.0007262">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.0003771">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Performance Characteristics &gt; should create components efficiently for frequent interaction state changes" time="0.00106">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Multi-Entity Interaction Scenarios &gt; should support multiple simultaneous interactions" time="0.0004086">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/InteractingComponent.test.ts" name="InteractingComponent &gt; Multi-Entity Interaction Scenarios &gt; should work with interaction exclusivity checks" time="0.0010369">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" timestamp="2025-07-21T00:07:01.067Z" hostname="XLW-CND1300JDV" tests="17" failures="0" errors="0" skipped="0" time="0.029197">
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Creation &gt; should create a movable component" time="0.0083179">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0012573">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Type &gt; should always have the correct component type" time="0.000765">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0007259">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0013366">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0021955">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0008816">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; ECS Integration &gt; should be usable as a filter component in ECS systems" time="0.0009373">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0020502">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0014478">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0008093">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0005932">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple components" time="0.0008163">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Equality &gt; should create distinct instances" time="0.0009532">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Equality &gt; should support type-based comparison" time="0.0006999">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Component Immutability &gt; should have stable type after creation" time="0.0007155">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/MovableComponent.test.ts" name="MovableComponent &gt; Performance Characteristics &gt; should create components efficiently" time="0.0012399">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" timestamp="2025-07-21T00:07:01.074Z" hostname="XLW-CND1300JDV" tests="19" failures="0" errors="0" skipped="0" time="0.0525346">
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Creation &gt; should create a pickable component" time="0.0129028">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0023539">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Type &gt; should always have the correct component type" time="0.0014519">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0013406">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0022826">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0015509">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.001345">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; ECS Integration &gt; should be usable as a filter component for pickup systems" time="0.0009849">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0032888">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0016486">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; ECS Integration &gt; should integrate with pickup game mechanics" time="0.0011082">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0009791">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0009959">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple components" time="0.0012847">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Equality &gt; should create distinct instances" time="0.0016346">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.0013668">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Game Logic Integration &gt; should support item identification for pickup systems" time="0.0032396">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Game Logic Integration &gt; should work with inventory management systems" time="0.0025459">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PickableComponent.test.ts" name="PickableComponent &gt; Performance Characteristics &gt; should create components efficiently" time="0.0024154">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" timestamp="2025-07-21T00:07:01.080Z" hostname="XLW-CND1300JDV" tests="34" failures="0" errors="0" skipped="0" time="0.0479865">
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Creation &gt; should create a player component" time="0.0100979">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0019939">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Type &gt; should always have the correct component type" time="0.0016264">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0009334">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0020477">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0008272">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0009199">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; ECS Integration &gt; should be usable as a filter component for player systems" time="0.0016439">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0014186">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0010673">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; ECS Integration &gt; should integrate with player-specific systems" time="0.001011">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Player State Management &gt; should indicate player entity status" time="0.0008877">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Player State Management &gt; should work with player identification systems" time="0.0026168">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Player State Management &gt; should support player-specific game logic" time="0.0011142">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Game State Integration &gt; should work with save/load systems" time="0.0006209">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Game State Integration &gt; should support player state persistence" time="0.0008569">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Game State Integration &gt; should integrate with player progression systems" time="0.0008589">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0020768">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0004443">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple player components" time="0.0007599">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Serialization Compatibility &gt; should preserve player state in save files" time="0.0007095">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Equality &gt; should create distinct instances" time="0.0009767">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.0004926">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Performance Characteristics &gt; should create components efficiently for large player counts" time="0.0009542">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Edge Cases and Invalid States &gt; should handle multiple player components on same entity" time="0.0005239">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Edge Cases and Invalid States &gt; should work with empty component arrays" time="0.0005721">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Edge Cases and Invalid States &gt; should handle null/undefined component checks gracefully" time="0.0004877">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; State Transition Testing &gt; should maintain consistent state during component lifecycle" time="0.0003652">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; State Transition Testing &gt; should support valid state transitions in game systems" time="0.0004068">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; State Transition Testing &gt; should prevent invalid state transitions" time="0.0005694">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Advanced Game Mechanics &gt; should support single-player game mechanics" time="0.0008126">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Advanced Game Mechanics &gt; should work with multiplayer identification systems" time="0.0007727">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Advanced Game Mechanics &gt; should support player-specific input handling" time="0.0006656">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PlayerComponent.test.ts" name="PlayerComponent &gt; Advanced Game Mechanics &gt; should integrate with player-specific camera systems" time="0.0005629">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" timestamp="2025-07-21T00:07:01.090Z" hostname="XLW-CND1300JDV" tests="15" failures="0" errors="0" skipped="0" time="0.0246382">
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Creation &gt; should create a position component with valid coordinates" time="0.0078299">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Creation &gt; should create component with zero coordinates" time="0.0012583">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Creation &gt; should create component with negative coordinates" time="0.0008911">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Creation &gt; should create component with fractional coordinates" time="0.001521">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Validation &gt; should handle very large coordinate values" time="0.0015885">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Validation &gt; should handle very small coordinate values" time="0.0009332">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Validation &gt; should handle Infinity values" time="0.0006423">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Edge Cases &gt; should handle NaN coordinates" time="0.0005502">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Edge Cases &gt; should handle mixed valid and invalid coordinates" time="0.0012195">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Type &gt; should always have the correct component type" time="0.0012339">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Component Type &gt; should maintain type consistency across instances" time="0.0006939">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Modification &gt; should allow direct property modification" time="0.0006328">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Property Modification &gt; should handle property modification with edge values" time="0.0006235">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0006567">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/PositionComponent.test.ts" name="PositionComponent &gt; Serialization Compatibility &gt; should handle serialization with special values" time="0.0005">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" timestamp="2025-07-21T00:07:01.096Z" hostname="XLW-CND1300JDV" tests="29" failures="0" errors="0" skipped="0" time="0.046055">
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Creation &gt; should create a render in sidebar component" time="0.0108534">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0016592">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Type &gt; should always have the correct component type" time="0.0012492">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0009559">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.001675">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0011671">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.0008573">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; ECS Integration &gt; should be usable as a filter component for sidebar rendering systems" time="0.0005894">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0020827">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0015257">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; ECS Integration &gt; should integrate with UI rendering systems" time="0.0011474">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; UI System Integration &gt; should indicate sidebar rendering requirement" time="0.0010152">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; UI System Integration &gt; should work with sidebar layout systems" time="0.0016746">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; UI System Integration &gt; should support UI element categorization" time="0.0007957">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Rendering System Integration &gt; should work with dual-pane rendering systems" time="0.0007888">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Rendering System Integration &gt; should support conditional rendering logic" time="0.0014144">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Rendering System Integration &gt; should integrate with layout management" time="0.0007626">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Rendering System Integration &gt; should work with responsive UI systems" time="0.0007475">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0006164">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0005711">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Serialization Compatibility &gt; should handle array serialization of multiple sidebar components" time="0.001102">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Serialization Compatibility &gt; should preserve UI state in save files" time="0.0008886">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Equality &gt; should create distinct instances" time="0.0011067">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Component Equality &gt; should support type-based comparison for ECS systems" time="0.0006055">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Performance Characteristics &gt; should create components efficiently for UI operations" time="0.0021159">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Game UI Integration &gt; should support inventory sidebar rendering" time="0.0007393">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Game UI Integration &gt; should work with minimap sidebar rendering" time="0.0004807">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Game UI Integration &gt; should support status display in sidebar" time="0.0006555">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/RenderInSidebarComponent.test.ts" name="RenderInSidebarComponent &gt; Game UI Integration &gt; should handle dynamic sidebar content" time="0.000666">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" timestamp="2025-07-21T00:07:01.102Z" hostname="XLW-CND1300JDV" tests="31" failures="0" errors="0" skipped="0" time="0.0853261">
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Creation &gt; should create a sprite component with valid sprite name" time="0.0151188">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Creation &gt; should create component with different sprite types" time="0.006274">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Creation &gt; should set sprite size from tile size atom" time="0.0045367">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Error Handling &gt; should throw error when texture is not found" time="0.0027542">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Error Handling &gt; should handle different invalid sprite names" time="0.0021491">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Error Handling &gt; should provide meaningful error messages" time="0.00202">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Type &gt; should always have the correct component type" time="0.0020533">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Component Type &gt; should maintain type consistency across instances" time="0.0017369">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Pixi.js Integration &gt; should create Pixi.js Sprite instance" time="0.0027502">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Pixi.js Integration &gt; should pass texture to Pixi.js Sprite constructor" time="0.0022248">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Pixi.js Integration &gt; should handle different texture sizes" time="0.002353">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Sprite Properties &gt; should have access to sprite properties" time="0.0013638">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Sprite Properties &gt; should allow sprite property modification" time="0.0013563">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Sprite Properties &gt; should support sprite visibility toggle" time="0.0012638">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Tile Size Integration &gt; should use different tile sizes" time="0.0018077">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Tile Size Integration &gt; should handle non-square tile sizes" time="0.0019868">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Tile Size Integration &gt; should call setSize on sprite creation" time="0.00176">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Rendering System Integration &gt; should be compatible with rendering systems" time="0.0010921">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Rendering System Integration &gt; should support sprite positioning" time="0.0009605">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Rendering System Integration &gt; should work with sprite transformation" time="0.0008823">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Resource Management &gt; should handle sprite cleanup" time="0.00098">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Resource Management &gt; should support sprite destruction" time="0.0012697">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Different Sprite Types &gt; should handle player sprites" time="0.0012198">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Different Sprite Types &gt; should handle environment sprites" time="0.0022723">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Different Sprite Types &gt; should handle item sprites" time="0.0020882">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Edge Cases &gt; should handle empty sprite names" time="0.0025252">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Edge Cases &gt; should handle special character sprite names" time="0.0038723">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Edge Cases &gt; should handle very long sprite names" time="0.0013563">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Serialization Considerations &gt; should have serializable component type" time="0.0010352">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Serialization Considerations &gt; should handle component identification" time="0.0011154">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/SpriteComponent.test.ts" name="SpriteComponent &gt; Serialization Considerations &gt; should preserve sprite reference for ECS operations" time="0.0011098">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" timestamp="2025-07-21T00:07:01.111Z" hostname="XLW-CND1300JDV" tests="22" failures="0" errors="0" skipped="0" time="0.0449145">
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create a velocity component with valid velocity values" time="0.0144293">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create component with zero velocity" time="0.0022867">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create component with positive velocities" time="0.0018992">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create component with negative velocities" time="0.0014718">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Creation &gt; should create component with fractional velocities" time="0.0015628">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Validation &gt; should handle very large velocity values" time="0.0015108">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Validation &gt; should handle very small velocity values" time="0.0010274">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Validation &gt; should handle very small positive values" time="0.0015498">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Validation &gt; should handle Infinity values" time="0.001478">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Edge Cases &gt; should handle NaN velocities" time="0.0012915">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Edge Cases &gt; should handle mixed valid and invalid velocities" time="0.0015164">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Edge Cases &gt; should handle negative zero values" time="0.0012835">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Type &gt; should always have the correct component type" time="0.0011511">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Component Type &gt; should maintain type consistency across instances" time="0.0010763">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Modification &gt; should allow direct property modification" time="0.0010841">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Modification &gt; should handle velocity direction changes" time="0.0011218">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Property Modification &gt; should handle velocity magnitude changes" time="0.000792">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Physics Calculations Compatibility &gt; should support velocity magnitude calculation" time="0.0006895">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Physics Calculations Compatibility &gt; should support velocity normalization" time="0.0007093">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Physics Calculations Compatibility &gt; should handle zero velocity normalization gracefully" time="0.0004617">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.0007781">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/VelocityComponent.test.ts" name="VelocityComponent &gt; Serialization Compatibility &gt; should handle serialization with zero values" time="0.000776">
        </testcase>
    </testsuite>
    <testsuite name="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" timestamp="2025-07-21T00:07:01.116Z" hostname="XLW-CND1300JDV" tests="32" failures="0" errors="0" skipped="0" time="0.0646112">
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Creation &gt; should create a walkable component" time="0.0135083">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Creation &gt; should create multiple instances with consistent type" time="0.0016294">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Type &gt; should always have the correct component type" time="0.0016348">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Type &gt; should have type property that is read-only in practice" time="0.0014269">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Marker Component Behavior &gt; should function as a marker component with no additional properties" time="0.0023235">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Marker Component Behavior &gt; should not have any methods beyond constructor" time="0.0020344">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Marker Component Behavior &gt; should be lightweight with minimal memory footprint" time="0.002698">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; ECS Integration &gt; should be usable as a filter component for collision systems" time="0.0010514">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; ECS Integration &gt; should work with entity component filtering patterns" time="0.0037238">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; ECS Integration &gt; should support instanceof checks" time="0.0023043">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; ECS Integration &gt; should integrate with movement systems" time="0.001752">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Collision Detection Integration &gt; should indicate walkable terrain" time="0.001207">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Collision Detection Integration &gt; should work with pathfinding systems" time="0.0012516">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Collision Detection Integration &gt; should support collision boundary detection" time="0.001216">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Movement System Integration &gt; should work with player movement validation" time="0.0011367">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Movement System Integration &gt; should support NPC movement systems" time="0.0014594">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Movement System Integration &gt; should integrate with movement speed calculations" time="0.0017432">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Movement System Integration &gt; should work with dynamic terrain changes" time="0.001162">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Game Map Integration &gt; should support tile-based collision detection" time="0.0009029">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Game Map Integration &gt; should work with procedural map generation" time="0.000706">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Game Map Integration &gt; should support multi-layer map systems" time="0.00116">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Serialization Compatibility &gt; should be JSON serializable" time="0.000474">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Serialization Compatibility &gt; should serialize to minimal JSON structure" time="0.0004302">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Serialization Compatibility &gt; should handle map serialization with walkable components" time="0.0005996">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Serialization Compatibility &gt; should preserve terrain state in save files" time="0.0007664">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Equality &gt; should create distinct instances" time="0.0007336">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Component Equality &gt; should support type-based comparison for collision systems" time="0.0005652">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Performance Characteristics &gt; should create components efficiently for large maps" time="0.0038238">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Advanced Game Mechanics &gt; should support conditional walkability" time="0.0012392">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Advanced Game Mechanics &gt; should work with teleportation systems" time="0.0017939">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Advanced Game Mechanics &gt; should support area-of-effect movement restrictions" time="0.0011022">
        </testcase>
        <testcase classname="src/game/components/individualComponents/__tests__/WalkableComponent.test.ts" name="WalkableComponent &gt; Advanced Game Mechanics &gt; should integrate with physics-based movement" time="0.0008535">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" timestamp="2025-07-21T00:07:01.127Z" hostname="XLW-CND1300JDV" tests="11" failures="0" errors="0" skipped="0" time="0.0296106">
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; System Initialization &gt; should verify system interface compatibility" time="0.0101272">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; System Initialization &gt; should handle placement operations through mocked dependencies" time="0.0015889">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Bresenham Line Algorithm &gt; should calculate points between two positions" time="0.001776">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Bresenham Line Algorithm &gt; should handle horizontal line drawing" time="0.0013621">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Bresenham Line Algorithm &gt; should handle vertical line drawing" time="0.0009662">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Placement Logic &gt; should use screen to grid coordinate conversion" time="0.0015976">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Placement Logic &gt; should create entities from templates" time="0.0029358">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Placement Logic &gt; should handle component checking for existing entities" time="0.0017859">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Management Integration &gt; should add new entities through EntityUtils" time="0.0014169">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Management Integration &gt; should remove entities through EntityUtils" time="0.0014306">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/EntityPlacementSystem.test.ts" name="EntityPlacementSystem &gt; Entity Management Integration &gt; should handle empty entity operations" time="0.0013281">
        </testcase>
    </testsuite>
    <testsuite name="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" timestamp="2025-07-21T00:07:01.132Z" hostname="XLW-CND1300JDV" tests="6" failures="0" errors="0" skipped="0" time="0.0171224">
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Sidebar UI Rendering &gt; should handle sidebar rendering with mocked Pixi.js components" time="0.0107797">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Sidebar UI Rendering &gt; should render entities with RenderInSidebar component" time="0.0009675">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Sidebar UI Rendering &gt; should manage sidebar container positioning" time="0.0009242">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Entity Filtering and Management &gt; should filter entities by required components" time="0.0007211">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Entity Filtering and Management &gt; should handle entity lifecycle in sidebar" time="0.0006318">
        </testcase>
        <testcase classname="src/game/systems/LevelEditorSystems/__tests__/RenderSidebarSystem.test.ts" name="RenderSidebarSystem &gt; Entity Filtering and Management &gt; should integrate with component system" time="0.0007105">
        </testcase>
    </testsuite>
</testsuites>
